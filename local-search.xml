<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Move语言为什么安全</title>
    <link href="/why-move-is-safety.html"/>
    <url>/why-move-is-safety.html</url>
    
    <content type="html"><![CDATA[<h1 id="概述">概述</h1><p>区块链是一个很重要的系统，大量资产存放在了区块链上，而且区块链上的这些交易，一旦执行了它是不可以撤销的。所以<strong>智能合约就需要有一些规范来规定它是否真的能提供了它所宣传提供的功能，而不是一些意料之外的功能，这就需要我们有一个语言和一套工具来保证这一点。</strong> 在这种背景下， Move 语言以及 Move Prover这个工具就应运而生。</p><p>Move 是一个面向区块链设计的编程语言，它提供了更好的安全性。简单来说 Move 语言的安全性能是由两部分组成的，一是Move的类型系统，二是Move Prover形式化验证的工具。</p><p>并且这两个系统分别提供了不同程度的安全保护，Move中的类型系统提供了：</p><ul><li><p>类型安全</p></li><li><p>资源安全</p></li><li><p>引用安全。</p></li></ul><p>形式化验证工具 Move Prover，它主要提供了更多更高级的表述方法，就是更高级的去表达你想做什么的规范。其中:</p><ul><li>结构体不变量struct invariants：可以表达一个类型，一个结构体应该有什么样的状态</li><li>函数规范unit specification (per single function ) ：每一个程序每一个函数要遵循什么样的规范</li><li>状态机规范state-machine specification：表达在区块链上整个全局的状态要遵循怎么样的一个状态规范。</li></ul><p>这三个东西都可以由 Move prover 形式化验证的工具来规范。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/MengXu-Move%20Prover-07.jpg" alt="MengXu-Move Prover-07"></p><p>Move 最早是为 Libra 项目所设计，后来Libra 改名为 Deim，Diem 后来卖给了Silvergate。而 Move 现在变成一个很多开发者参与，由社区来维护的开源的语言。</p><p>Move 的核心设计思想其实包括两点，第一点是它遵循了所谓的borrow semantic，一个借用的思想，这个就很像Rust的 borrow semantic，如果大家用过Rust语言的话，你会发现很多思想其实是借鉴于Rust来的。</p><p>另外一点就是 Move 遵循了所谓的 Linear Types，就像如果大家习惯于用这种所谓 smart pointer 的话，那么在c++里面有一个东西叫 unique pointer，它其实就是规范了一个对象的所有权，然后这个东西也被 Move 所吸收进来。</p><p>同时Move中是不存在动态调用。也就是说在编译一个 Move 智能合约的时候，我们就知道所有可能的执行路径，不会像 solidity 这样会有一个所谓的call back(动态调用的回调)，然后调用到<code>fallback</code>函数。这种事情在 Move 里面是不存在的。</p><p>最后Move中有一个完整的并且很强大的一个规范语言MSL。除了 Move 语言本身，开发者还可以对 Move 的程做出一些规范（spec），这个规范包括常见的pre/post condition，然后还有全局的全局状态不变量（global state invariant），这些我们都可以通过规范语言来实现。MSL规范语言其实是比 Move 语言本身要更强大的。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221116235606443.png" alt="image-20221116235606443"></p><h1 id="Move-类型系统">Move 类型系统</h1><p>Move 类型系统其实是 Move 的第一个安全特性，它主要保证了三个问题，一个是类型安全，一个是资源安全，一个是引用安全。</p><h2 id="类型安全">类型安全</h2><p>首先类型安全，简单来说 Move 它是一个强类型系统，并且它严格保证了在任何情况下都不可以做类型转换，你永远不可能把一个类型转化为另一个类型，这是 Move 这个类型系统所提供的一个保证。</p><p>如果更详细的说的话，Move 类型安全表达的是：</p><ul><li><p>每一个变量或者表达式，在Move中都有且只有一个类型</p></li><li><p>这个类型是在编译的时候就知道的</p></li><li><p>并且这个变量类型永远不可能被改变</p></li></ul><p>以上就是Move的类型系统所要保证的。</p><p>熟悉 Move 会觉得这个说法的不太对，比如Move中具有一个freeze这样的操作，它可以把一个mutable reference改成一个immutable，或者有那种as语法可以把一个uint8变成另一个uint64。但实际你却发现这个操作它并没有对变量做改变，它做的其实是重新新建了一个变量，并且把新的变量给它一个固定的类型，所以这些操作并没有违反 Move 的类型安全保证。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221115223924450.png" alt="image-20221115223924450"></p><p>例如如果试图编译如下的代码的话，可以发现如果你写了一个类型不安全的程序， Move compiler根本就不会让你通过，会直接报错，说你在这里试图把一个<code>integer</code>转换成一个<code>Coin</code>，当然这样是不合理的，所以这就是 Move 类型安全所要保证的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs move">module 0x1::Account &#123;<br>    struct Coin has key &#123;<br>        balance: u64<br>    &#125;<br><br>    public fun wrong1(acc: signer) &#123;<br>        let val = 1000;<br>        move_to&lt;Coin&gt;(&amp;acc, val);<br>    &#125;<br><br>    public fun wrong2(acc: signer) &#123;<br>        let val = 1000;<br>        let coin: Coin = val;<br>        move_to&lt;Coin&gt;(&amp;acc, coin);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="资源安全">资源安全</h2><p>在常见的这种编程语言里没有资源安全这个东西，Move中的资源安全允许你去做一些更细粒度的控制。对于比如说一个object它可不可以被复制，可不可以被丢弃，或者这个资源能存在于什么地方，以及这个资源的谁能生成，这个是对整个这种type的资源的一个控制。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221116235650114.png" alt="image-20221116235650114"></p><p>我们如果举一个具体的例子来说的话。比如区块链上具有一种资源<code>Coin</code>，显然你如果试图复制一个 <code>coin</code>这种资源，相当于你从一个 <code>Coin</code> 变成两个<code>Coin</code>，那显然你钱就变多了，这个是不能接受的，同时 <code>Coin</code> 也不可能凭空消失，你必须把它花出去。简单来说就是一个东西它不能凭空出现，也不能凭空消失。这样的稀缺性就是由Move中的ablity，copy和drop来实现的。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221115230458216.png" alt="image-20221115230458216"></p><p>通过 copy和drop这两个ability，它保证说一个资源它是不是能被复制，或者是不是能被扔到一边不管，它是由这两个ability决定。还有两个ability (key 和 store )决定这个资源它可以出现在哪里，它是否可以出现在你的function里面，并且随着你的智能合约结束就消失了，还是它可以写到区块链上，这个也是这两个ability决定的。</p><p>另一个例子是<a href="https://move-patterns.chrisyy.top/hot-potato.html">Hot Potato</a>，这是Move设计模式的一种，它通过Ability优雅的实现了函数的流程控制（可以去对比下Solidity中闪电贷的实现）。</p><h2 id="引用安全">引用安全</h2><p>Move中还有一个引用安全保证了安全性。如果你习惯于c语言或者c++，你肯定会遇到这种所谓的dangling pinter的问题，也就是野指针，野指针可能导致修改任意对象的问题。所以在Move中引入了所有权，来保证这一问题。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221116235722570.png" alt="image-20221116235722570"></p><p>&quot;引用安全&quot;简单来说就是遵循了Rust的所谓的ownership的规则：</p><ul><li>任何一个函数里面的本地变量，在任何一个时间有且只能有一个owner来拥有。</li><li>同时对于一个全局变量，在整个blockchain里面，对于任何一个类型有且只有一个owner可以来拥有它</li></ul><p>这里的owner代表的是最多一个写者，或者没有写者但有多个读者的情况。</p><h1 id="Move的形式化验证系统">Move的形式化验证系统</h1><p>形式化验证是一种使用严格的数学方法来描述行为和推理计算机系统的正确性的技术。现在已经在操作系统、编译器等对正确性要求高的领域有一定应用。这里存在一个很明显的问题就是为什么在有了类型系统之后，为什么我们还需要 Move Prover 这样一个形式化验证系统？</p><p>简单的说是因为：类型系统只能保证一个比较简单的逻辑，它并不能满足于我们表述真实世界中对应的更复杂的逻辑需求或者更复杂的意图。比如，类型系统不能保证某一种结构体中的变量不会到达一个非预期的状态，或者函数前后的关系的约束，以及 global state的状态，这些目前都是没有办法全部被类型系统所表示的。</p><p>所以需要通过一种更高层次的方式来表达，而这个更高层次的方式就是所谓的形式化验证。Move中提供了一种更高层次的语言也就是 <a href="https://github.com/move-language/move/blob/main/language/move-prover/doc/user/spec-lang.md">MSL</a> (Move Specification Language) 语言来约束，规范Move代码，同时提供了一些工具来帮组我们来进行形式化验证，其中包含：</p><ul><li><p>结构体不变量 Struct invariant</p></li><li><p>测试规范 Unit specification</p><ul><li>前置条件 Pre-condition</li><li>异常条件Abort condition</li><li>后置条件 Post-conditions</li></ul></li><li><p>状态规范 State-machine specification</p><ul><li>Global invariants (single-state invariant)</li><li>Global update invariants (two-state invariant)</li></ul></li></ul><h2 id="结构体不变量-Struct-Invariant">结构体不变量 Struct Invariant</h2><blockquote><p>Struct invariants allows you to specify complicated relations among the fields of a struct type which have to hold at runtime.</p></blockquote><p>结构体不变量指的是允许你在运行时对结构体中不同的field之间复杂的关系作出规定，这是一个类型系统所达不到的。</p><p>一个最简单的例子，比如你根据一些事实或者商业逻辑，需要定义一个包含非0的64位的整数的结构体，最有效的方式是如果一个语言系统里已经存在一个非0的64位的整数类型，那么直接使用即可。但是这是目前在绝大多数语言里是没有办法做到，因为没有一个类型叫非0的64位整数。你能得到的最近的一个东西就是一个64位整数。所以你可以创造一个结构体，结构体的名字叫非零64位整数，然后里面有一个field，它叫结构体的值，然后它是64位整数。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221116235934949.png" alt="image-20221116235934949"></p><p>但是这里存在一个问题，也就是整个所有的这些类型这个系统并不能阻止你写一个0进去，如果不小心写出来一个上图的函数 <code>fun create_zero()</code>它允许把一个0放到了结构体里面，这对运行时和编译器来说是完全没有问题的，但是这显然不是我们想要的。</p><p>所以这个时候就需要形式化验证的工具来给你提供能力。你就可以写一个形式化验证的一个规范，规定说在非零的结构体里面，它叫<code>value</code>的 <code>field</code>一定是要大于0。</p><p>然后在你有了这个规范之后，上文的函数 <code>fun create_zero()</code>，那么prover是会在这里报错。</p><p>而上图的第二个函数<code>fun create_x_checked()</code> 是允许的，因为这个函数是符合你所定义的规则，它一定不会把一个≤0的值放到这个结构体当中</p><p>所以当我们生成这样一个叫非0的64位整数的这样一个结构体的时候，其实就可以保证结构体的值一定不是0。这就是一个典型的 Move prove可以应用的一个例子。这一套结构体加结构体的规范，它其实起到的是一个“增强类型”的作用，它可以保证说结构体里面域之间的关系是符合某种关系。</p><p>刚刚是一个非常简单的例子，其实 Move Spec 可以支持写很复杂的关系，</p><h2 id="函数规范-Function-Specification">函数规范 Function Specification</h2><blockquote><p>For people not familiar with formal verification, function specification can be loosely considered as exhaustive unit testing.</p></blockquote><p>Move Prover可以对一个函数做一个规范，其中就包括函数应该表现成什么样子，他在什么样情况下会异常报错，什么样的情况下会结束执行，而在结束执行的情况下，他又应该保持一个什么样的状态？这个就是函数规范所要达到的一个目的。</p><p><strong>可以把函数规范想象成一个人在写单元测试，但这个人比任何人写的测试都要好。</strong></p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221117000254260.png" alt="image-20221117000254260"></p><p>比如上图的代码，如果想知道这个代码对还是不对？那么你就可以开始对他做单元测试。</p><p>大家可能都听过一个单元测试的笑话，说QA工程师走进一家酒吧，要了一杯啤酒；要了-1杯啤酒，要了9999999杯啤酒，要了一杯洗脚水… 然后这其实就是单元测试做的一个事情。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/MengXu-Move%20Prover-39.jpg" alt="MengXu-Move Prover-39"></p><p>如果想去测试这个就取钱的函数，你会怎么做？你去走到一个ATM机前，然后你开始取钱，取10块钱，取1000块钱，取9999999999999999999999999099块钱，甚至从一个不应该取钱的一个地址，比如说零这个地址去取，取0块钱等，就是有目的的去测试一些边界值的可能性。</p><p>然后你去试图穷尽你写的代码里面所有的可能的路径，然后你发现穷尽所有路径都没问题，这个是单元测试想要做的。你可以想象成对于函数的规范形式化验证工具 Move prove它也是在做这样一件事情。虽然它并不是实际上去把所有的可能情况都遍历一下。</p><h3 id="异常退出-Abort-Conditions">异常退出 Abort Conditions</h3><p>Move prover 给你提供了允许你去更专业去表达这个函数应该怎么样做事务处理的机会，就是通过所谓的函数的规范你可以写一个取钱函数的规范。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/MengXu-Move%20Prover-40.jpg" alt="MengXu-Move Prover-40"></p><p>关于取钱函数存在两个会报错的地方：</p><ul><li>首先如果地址就没有根本没有开户，那么会报错。这个就是第9行<code>abort if</code>的意思。</li><li>如果取的钱大于余额，那么同样会报错。也就是第10行的<code>abort if</code>的意思。</li></ul><p>这里（从第8到11行）提供了一个取钱的专业的规范，它会报错并且它只会在这两个地方报错。不仅是它会报错，<strong>同时是这两个报错是涵盖了所有可能的报错</strong>，这个就是函数的规范。我们可以对上图的代码做一个简单的测试，跑一下形式化验证的工具，然后我们发现这个规范是对的，确实这个函数会在这两个情况下报错。</p><p>如果假设说我足够粗心，或者我们认为不存在开户的情况下程序不会报错，我们把第9行注释掉（相当于我们的规范不完整），在这个情况下，形式化验证的工具其实会报错的（如下图），它会提醒你有一个异常发生了，但是我们并没有在规范里面去提到它。</p><p><img src="https://pic1.zhimg.com/80/v2-a1caf50d0c9d65be880b7995aa28adc4_1440w.webp" alt="img"></p><p>这个是不是这两个报错的条件，是不是真的是你期望看到的这种条件，我们都可以利用形式化验证工具来帮我们去理解这个程序的代码有什么问题。我们在实际的开发中经常会遇到说没想到它会报错，但是它实际上报错了的情况，这种时候这个 Prover 工具其实是非常有效的。</p><h3 id="后置条件-Post-conditions">后置条件 Post-conditions</h3><p>Prover除了关注它在什么情况下会出错，它还能够约束这个函数执行完要达到什么样的状态，这是比报错情况更重要的一个事情。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221115174651183.png" alt="image-20221115174651183"></p><p>对于取钱这个函数的话，你得到的状态应该是当你的取钱函数结束了，你的钱肯定会减少，同时你减少的钱一定是等于你要取出来的钱。比如说你说要取100万，它一定是只减少100万，它不能减少200万，他也不能减少50万，他只能减少100万，这个东西就叫 后置条件post condition。</p><h3 id="前置条件-Pre-conditions">前置条件 Pre-conditions</h3><p>除了可以写什么情况下会异常、没有异常的话状态会发生什么变化，我们还可以规范在什么情况下，我们可以真正的进入这个函数。比如要求“无论什么时候调用这个函数，必须要求这个人已经开过户了”。在调用内部取钱这个函数的时候，一定要求有一个账户存在，你就可以把这个东西列为所谓的前置条件，你在调用这个函数的时候前置条件一定要存在，有了这个前置条件，就可以简化你需要列出的异常退出条件。</p><p>这种比较类似于测试中的setup</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/MengXu-Move%20Prover-46.jpg" alt="MengXu-Move Prover-46"></p><p>所以简单来说就是你有前置条件，你有异常条件和你有后置条件，你这个东西就可以完整的规范说你这个函数应该做什么，以及不能做什么，这就是函数的规范的内容。</p><h3 id="全局不变量-Global-Invariants">全局不变量 Global Invariants</h3><p>全局不变量类似于结构体不变量，只不过它能够限制所有拥有这个类型资源的状态。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/MengXu-Move%20Prover-49.jpg" alt="MengXu-Move Prover-49"></p><p>如果把全局的区块链看作一个状态机的话，Global的资源状态就是区块链当前的状态。全局不变量提供了一个工具去描述什么状态是对的，什么状态是不对的这样一个功能，同时它还给你描述了在哪些情况下你可以做这个状态的转换。</p><p>具体的例子：你想写一个银行账户系统，每个账户里面存了每个人多少钱，你其实都不用去定义任何函数，只要定义了账户系统，就可以开始去定义一些全局的东西。比如说你想定义：</p><ul><li><p>账户系统要保证任何现有的账户不能少于100块钱，</p></li><li><p>任何提取不能单次提取不能超过10%的现有的钱</p></li></ul><p>那么形式化的规范可以按照下图来写，当你开始实现你的功能代码的时候，那么Prover可以根据规范来检查你的错误。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/MengXu-Move%20Prover-50.jpg" alt="MengXu-Move Prover-50"></p><p>有了上图的规范代码后，你根本就不去关心它函数到底怎么实现，然后就可以去真正去写金融的实现，比如说你有一个取钱的函数，如下图的实现。</p><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/MengXu-Move%20Prover-51.jpg" alt="MengXu-Move Prover-51"></p><p>当写完上述代码，<strong>我们写完的这两个函数自动的就会被这两个全局的规范所限制</strong>。刚刚那个代码去 Prover 验证的时候，我们会发现验证不过，因为写的函数里面并没有去支持我们想要的全局规范。</p><p>所以说全局规范简单点说，它是一个比函数的本身的规范更高层次的一个规范，它可以允许你去直接描述区块链的状态机，而不去关心具体实现。如果一个区块链的构架师不关心每个函数怎么执行，但是关心整个全局状态，他要整个区块链系统要保持一个什么样状态，就是这种全局的不变性或者不变量，那么全局规范可以满足这种要求。这个是关于整个全局变量的介绍。其实 Move Prover里还有很多其他高级的功能，如果大家感兴趣的话，可以持续关注 Move Prover的进展。</p><h1 id="总结">总结</h1><p><img src="https://blog-1258732960.cos.ap-chengdu.myqcloud.com/blog-img/image-20221115183310799.png" alt="image-20221115183310799"></p><p>以上就是Move为什么是一门安全的智能合约语言的介绍，简单的说就是通过类型系统和形式化验证系统来保证的。</p><p>类型系统通过类型安全，资源安全和Rust中类似的引用安全来保证。</p><p>而Move Prover也就是形式化验证系统，则通过各种约束条件，相比于类型系统可以提供的更多的保证。其中具有对类型的一种增强，也有限制函数前后关系的约束，此外通过全局不变量这个规范，可以这个全局的状态都是符合要求的。</p>]]></content>
    
    
    <categories>
      
      <category>blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Movectf 题解writeup</title>
    <link href="/movectf-writeup.html"/>
    <url>/movectf-writeup.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>由 Sui 开发公司 Mysten Labs 支持的首个 MoveCTF（Capture The Flag）安全竞赛包含四道题目，以下是所有题目的题解</p><p>题目源码和题解：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF">https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF</a></p></blockquote><h1 id="checkin">checkin</h1><p>调用entry入口函数从而触发Flag事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs move"><br>public entry fun get_flag(ctx: &amp;mut TxContext) &#123;<br>        event::emit(Flag &#123;<br>            user: tx_context::sender(ctx),<br>            flag: true<br>        &#125;)<br>    &#125;<br></code></pre></td></tr></table></figure><p>调用函数可以通过cli来调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs move"># get_flag<br>sui client call --function get_flag --module checkin --package &lt;packageID&gt; --gas-budget 3000<br></code></pre></td></tr></table></figure><h1 id="simple-game">simple_game</h1><blockquote><p>题目源码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/simple_game">source code</a></p><p>题解代码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/simple_game/solve">solve code</a></p></blockquote><p>这道题是一个区块链上的游戏，部署时创建了一个Hero，每个英雄具有 200 点体力, 每次与普通怪物战斗消耗 1 点体力，与 Boss 战斗消耗 2 点体力。体力耗尽后，英雄不再能够战斗。</p><p>每次击杀怪物后，英雄经验 +1，当英雄经验达到 100 后，可以升级；升级后英雄 HP，strength，defense 均提升；英雄最高等级为 2。英雄等级达到 2 后，可以根据装备稀有度继续刷怪物或者击杀 Boss；击败 Boss 后，有 1% 几率掉落宝箱，最后打开宝箱同样也只有1%几率成功打开。</p><p>通过分析得到如果直接去打boss，一个是每次都会扣除2点的体力值，第二是击败后宝箱掉落几率太低。即使运气好击败boss成功掉落，后面打开TreasuryBox同样只有1%的概率，且如果随机数不为0的话宝箱则会丢失。所以需要预测随机数，才能在200的体力的限制下，成功击杀 Boss，保证掉落几率 100%，最后成功打开。</p><p>题目的随机数是通过<a href="https://github.com/chrisyy2003/ctf-writeup/blob/main/MoveCTF/simple_game/sources/random.move">random</a>库实现的，随机数种子是<code>ctx_bytes</code>和<code>uid_bytes</code>的拼接，<code>uid_bytes</code>是sui中object对象中<code>uid</code>字段转字节后的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs move">fun seed(ctx: &amp;mut TxContext): vector&lt;u8&gt; &#123;<br>        let ctx_bytes = bcs::to_bytes(ctx);<br>        let uid = object::new(ctx);<br>        let uid_bytes: vector&lt;u8&gt; = object::uid_to_bytes(&amp;uid);<br>        object::delete(uid);<br><br>        let info: vector&lt;u8&gt; = vector::empty&lt;u8&gt;();<br>        vector::append&lt;u8&gt;(&amp;mut info, ctx_bytes);<br>        vector::append&lt;u8&gt;(&amp;mut info, uid_bytes);<br><br>        let hash: vector&lt;u8&gt; = hash::sha3_256(info);<br>        hash<br>    &#125;<br></code></pre></td></tr></table></figure><p>所以如果能够获得当前交易的<code>ctx_bytes</code>和新生成的<code>uid</code>即可预测seed。</p><p><code>uid</code>是由<a href="https://github.com/MystenLabs/sui/blob/devnet-0.15.0/crates/sui-framework/sources/tx_context.move#L53">tx_context</a>库中的new函数通过ctx参数生成，内部调用了内置<code>derive_id</code>函数，<code>derive_id</code>通过当前交易的哈希值和<code>ids_created</code>拼接生成，<code>hash(tx_hash || ids_created)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs move">/// Generate a new, globally unique object ID with version 0<br>public(friend) fun new_object(ctx: &amp;mut TxContext): address &#123;<br>        let ids_created = ctx.ids_created;<br>        let id = derive_id(*&amp;ctx.tx_hash, ids_created);<br>        ctx.ids_created = ids_created + 1;<br>        id<br>    &#125;<br><br>/// Native function for deriving an ID via hash(tx_hash || ids_created)<br>native fun derive_id(tx_hash: vector&lt;u8&gt;, ids_created: u64): address;<br></code></pre></td></tr></table></figure><p>通过TxContext结构体可以得到，<code>ids_created</code>是<code>TxContext</code>的内置字段，表示当前交易被创建了多少个对象的一个计数器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs move">struct TxContext has drop &#123;<br>        /// A `signer` wrapping the address of the user that signed the current transaction<br>        signer: signer,<br>        /// Hash of the current transaction<br>        tx_hash: vector&lt;u8&gt;,<br>        /// The current epoch number.<br>        epoch: u64,<br>        /// Counter recording the number of fresh id&#x27;s created while executing<br>        /// this transaction. Always 0 at the start of a transaction<br>        ids_created: u64<br>    &#125;<br></code></pre></td></tr></table></figure><p>所以，如果能够获得当前交易被创建了多少个对象即可获得下一个<code>UID</code>的值，从而知道下一个seed的返回值。</p><p>但是函数参数中的<code>ctx</code>由于在定义的<code>TxContext</code>模块外，Move不能在模块以外直接修改其中的<code>ids_created</code>值，所以需要利用<a href="https://github.com/MystenLabs/sui/blob/devnet-0.15.0/crates/sui-framework/sources/bcs.move">bcs库</a>反序列化<code>ctx</code>对象，从而手动修改<code>ids_created</code>值。</p><p>bcs库主要实现了move中对象的一些序列化和反序列化操作，新建一个bcs对象会使得结构体的存储顺序交换，因为其中会调用<code>v::reverse(&amp;mut bytes)</code> ，所以返回结果中首20个字节是地址，紧接着是<code>tx_hash</code>，<code>epoch</code>，<code>ids_created</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs move">let ctx_bytes = bcs::new(bcs::to_bytes(ctx));<br>let _recover_address = bcs::peel_address(&amp;mut ctx_bytes);<br>let recover_tx_hash = bcs::peel_vec_u8(&amp;mut ctx_bytes);<br>let _recover_epoch = bcs::peel_u64(&amp;mut ctx_bytes);<br>let recover_ = bcs::peel_u64(&amp;mut ctx_bytes);<br>// 加上对象创建的数量<br>let ids_created = recover_ids_created + uid_offset;<br></code></pre></td></tr></table></figure><p>拿到<code>ids</code>，加上预测交易中可能创建的对象数，再将新的<code>ids</code>和<code>tx_hash</code>序列化为<code>uid</code>，随后按照题目中的seed的构造方式构造自己的seed即可。</p><blockquote><p>需要注意的是，<a href="https://github.com/MystenLabs/sui/blob/devnet-0.15.0/crates/sui-framework/sources/tx_context.move#L55-L56">object::new</a>时，是先计算id值，后更新id，所以预测的seed实际上是下一次seed的值</p></blockquote><p>最后封装一个<code>refresh_ctx</code>函数，每次使得offset的值+1，（也就是创建的对象数+1）去寻找随机数为0的id数。如果为0则跳出循环，并创建刚才循环次数的对象数从而修改ctx中的参数，最后使得合约下一次随机数为0。</p><p>此外，在<code>slay_boar_king</code>时，源码中创建<code>monster</code>时会<a href="https://github.com/chrisyy2003/ctf-writeup/blob/main/MoveCTF/simple_game/sources/adventure.move#L69-L72">调用四次随机数</a>，所以打boss时需要预测随机数为0的<a href="https://github.com/chrisyy2003/ctf-writeup/blob/main/MoveCTF/simple_game/solve/sources/main.move#L20">前四次</a>。</p><p>此题题解源码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/simple_game/solve">https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/simple_game/solve</a></p><h1 id="flash-loan">flash loan</h1><blockquote><p>题目源码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/flash_loan">source code</a></p><p>题解代码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/flash_loan/solve">solve code</a></p></blockquote><p>本题利用了Hot Potato实现了Move中的闪电贷，关于什么是Hot Potato可以看一下<a href="https://blog.chrisyy.top/move-patterns/hot-potato.html">Move Patterns Hot Potato</a>。</p><p>根据闪电贷的逻辑，每个人可以给<code>FlashLender</code>借钱，并且结构题存在一个VecMap记录着每个人存放了多少。</p><p>由于逻辑设计的问题，用户可以通过闪电贷来增加自己的存款余额，此外闪电贷的设计是<code>repay</code>和<code>check</code>余额是分开的，<code>check</code>检查余额的时候也是检查整个<code>Lender</code>的余额和<code>Last</code>的比较，所以导致check消耗我们的<code>receipt</code>的时候不需要传入代币，从而可以导致<code>FlashLender</code>中记录的值大于实际拥有的值。</p><p>所以通过闪电贷借出后再向Lender存款增加余额，最后再提取即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs move">entry public fun do(self: &amp;mut FlashLender, ctx: &amp;mut TxContext) &#123;<br>        let (coin, receipt) = flash::loan(self, 1000, ctx);<br>        flash::deposit(self, coin, ctx);<br>        flash::check(self, receipt);<br>        flash::withdraw(self, 1000, ctx);<br><br>        flash::get_flag(self, ctx);<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后通过cli调用部署的solve合约，从而获得Flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs move">sui client call --function do --module m --package &lt;your_packID&gt; --args &lt;FlashLenderID&gt; --gas-budget 3000<br></code></pre></td></tr></table></figure><h1 id="move-lock">move_lock</h1><blockquote><p>题目源码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/move_lock">source code</a></p><p>题解代码：<a href="https://github.com/chrisyy2003/ctf-writeup/blob/main/MoveCTF/move_lock/solve.py">solve code</a></p></blockquote><p>这道题关于一些数学知识。其中最核心是以下代码，通过变量名能够想到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>是一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">3\times3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>的矩阵，通过表达式可以得出其含义为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵左乘<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>矩阵，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>P</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">AP=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs move">let c11 = ( (a11 * p11) + (a12 * p21) + (a13 * p31) ) % 26;<br>let c21 = ( (a21 * p11) + (a22 * p21) + (a23 * p31) ) % 26;<br>let c31 = ( (a31 * p11) + (a32 * p21) + (a33 * p31) ) % 26;<br></code></pre></td></tr></table></figure><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>13</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>23</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>31</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>33</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>33</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mn>11</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mn>21</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mn>31</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>11</mn></msub><mo>×</mo><msub><mi>p</mi><mn>11</mn></msub><mo>+</mo><msub><mi>a</mi><mn>12</mn></msub><mo>×</mo><msub><mi>p</mi><mn>21</mn></msub><mo>+</mo><msub><mi>a</mi><mn>13</mn></msub><mo>×</mo><msub><mi>p</mi><mn>33</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>21</mn></msub><mo>×</mo><msub><mi>p</mi><mn>11</mn></msub><mo>+</mo><msub><mi>a</mi><mn>22</mn></msub><mo>×</mo><msub><mi>p</mi><mn>21</mn></msub><mo>+</mo><msub><mi>a</mi><mn>23</mn></msub><mo>×</mo><msub><mi>p</mi><mn>33</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>31</mn></msub><mo>×</mo><msub><mi>p</mi><mn>11</mn></msub><mo>+</mo><msub><mi>a</mi><mn>32</mn></msub><mo>×</mo><msub><mi>p</mi><mn>21</mn></msub><mo>+</mo><msub><mi>a</mi><mn>33</mn></msub><mo>×</mo><msub><mi>p</mi><mn>33</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>11</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>21</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>31</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left[\begin{array}{ccc}a_{11} &amp; a_{12} &amp; a_{13} \\a_{21} &amp; a_{22} &amp; a_{23} \\a_{31} &amp; a_{33} &amp; a_{33}\end{array}\right]\left[\begin{array}{l}p_{11} \\p_{21} \\p_{31}\end{array}\right]=\left[\begin{array}{l}a_{11} \times p_{11}+a_{12} \times p_{21}+a_{13} \times p_{33} \\a_{21} \times p_{11}+a_{22} \times p_{21}+a_{23} \times p_{33} \\a_{31} \times p_{11}+a_{32} \times p_{21}+a_{33} \times p_{33}\end{array}\right]=\left[\begin{array}{l}c_{11} \\c_{21} \\c_{31}\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">13</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">13</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>矩阵是<code>complete_plaintext</code>，<code>complete_plaintext</code>前9个已知，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>矩阵已知，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>矩阵为<code>encrypted_flag</code>，前9个同样已知。所以通过sagemath中的<a href="https://doc.sagemath.org/html/en/tutorial/tour_linalg.html#linear-algebra">solve_left</a>可以求的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵即源码中的<code>key</code>，求的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>后由于<code>complete_plaintext</code>除前9个以外<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>未均知，但<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>已知，所以通过<a href="https://doc.sagemath.org/html/en/tutorial/tour_linalg.html#linear-algebra">solve_right</a>再求一次即可。</p><blockquote><p>由于<code>encrypted_flag</code>输出3个是c矩阵中的列，所以处理<code>encrypted_flag</code>时，需要三个一组<br>并调用<code>transpose</code>转置一下<br>sagamath有在线运行环境：<a href="https://sagecell.sagemath.org/">https://sagecell.sagemath.org/</a></p></blockquote><p>此外还有一个不成熟的想法，利用sagemath中的<a href="https://doc.sagemath.org/html/en/reference/calculus/sage/symbolic/relation.html?highlight=solve_mod">solve_mod</a>直接解一个9元的非线性方程，但是跑了很久没有跑出来，应该是复杂度的问题。</p>]]></content>
    
    
    <categories>
      
      <category>writeup</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
