<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>3分钟搭建GPT3-QQ机器人！</title>
    <link href="/qq-gpt3.html"/>
    <url>/qq-gpt3.html</url>
    
    <content type="html"><![CDATA[<h1 id="遇到问题？">遇到问题？</h1><ol><li>私聊有反应，群里没反应？</li></ol><p>可能是机器人被风控，二是群中触发根据设置可能需要@</p><ol start="2"><li>windows安装失败</li></ol><p>windows需要额外安装一个rust环境，<a href="https://blog.chrisyy.top/qq-gpt3.html#windows">https://blog.chrisyy.top/qq-gpt3.html#windows</a></p><ol start="3"><li>linux安装不上</li></ol><p>插件依赖playwright，<strong>playwright在linux上只支持ubuntu系统，不支持centos</strong>。</p><ol start="4"><li>开启图片渲染失败</li></ol><p>请执行命令，<code>pip install playwright &amp;&amp; playwright install</code>，并在 <code>.env.dev</code> 文件中设置 <code>FASTAPI_RELOAD=false</code></p><h1 id="前言">前言</h1><h2 id="chatGPT和GPT3的区别">chatGPT和GPT3的区别</h2><p>很多小伙伴可能对二者概念有些模糊，其实这是两个不同的东西。</p><p>ChatGPT 和 GPT-3 都是由 OpenAI 训练的大型语言模型，但它们有一些关键的区别。GPT-3，即<strong>Generative Pretrained Transformer 3</strong>，是 OpenAI 的第三代 GPT 语言模型，是目前最强大的语言模型之一。它可以针对各种自然语言处理任务进行微调，包括语言翻译、文本摘要和问答。</p><p>另一方面，ChatGPT 是<strong>专门为聊天机器人应用程序设计的 GPT-3 模型的变体</strong>。它已经在大型对话文本数据集上进行了训练，因此能够生成更适合在聊天机器人上下文中使用的响应。ChatGPT 还能够在对话中插入适当的特定于上下文的响应，使其更有效地保持连贯的对话。</p><p>在性能方面，<strong>ChatGPT 不如 GPT-3 强大</strong>，但它更适合聊天机器人应用，这使其成为在实时聊天机器人系统中使用的更好选择。总体而言，ChatGPT 和 GPT-3 都是强大的语言模型，但它们的设计目的不同，各有优缺点。</p><p>GPT3是公开了官方API接口，可以通过openai官方仓库找到代码实现。</p><p>而ChatGPT目前是没有公开API，所有ChatGPT的机器人都是通过浏览器抓包，逆向解析API接口实现的，这也导致了openAI上了CloudFlare导致的严重antiBot限制。</p><h2 id="openAI限制时间线">openAI限制时间线</h2><p>2022 年 12 月 12 日：OpenAI 为其 API 添加了 Cloudflare 保护，添加了cf字段，限制登陆ip和请求ip相同</p><p>2022 年 12 月 13 日：一个临时方案是通过手动复制cf，token值请求，cf字段时限两小时。</p><p>2022 年 12 月 14 日：添加了动态cf字段，请求会使得cf字段刷新。</p><p>2022 年 12 月 15 日：限制了ip，非可用地区只能请求一句话，方案变为了完全的模拟浏览器的方案。</p><h2 id="安装">安装</h2><p>启动bot有两种方式：</p><ol><li>docker安装（推荐）</li><li>手动安装</li></ol><p>安装总共只有两步：</p><ol><li>下载整合包，输入qq号登陆</li><li>安装插件，输入API</li></ol><p>前两步实际上包含cqhttp和nonebot的配置，但是我整合了一下，可以使得大家更方便一点，可以通过这里直接下载。</p><p><strong>并且下文则按照整合包的安装顺序讲解。</strong></p><p>如果您了解相关原理，可以不通过打包的文件，这样可以实现更加自定义的配置，具体可以看前一个文章，其中有讲到如何配置cqhttp和nonebot</p><h1 id="docker安装（推荐）">docker安装（推荐）</h1><p>首先<a href="https://file.chrisyy.top/qq-example.zip">下载整合包</a>，随后解压，切换到解压文件夹根目录，在<code>config/chatgpt_api_key.yml</code>填入自己的API，并执行以下命令即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -v $(PWD):<span class="hljs-regexp">/bot -d chrisyy2003/</span>nonebot bash <span class="hljs-regexp">/bot/</span>start.sh<br></code></pre></td></tr></table></figure><p>随后在<code>cqhttp/config.yml</code>中修改为您的QQ号，随后根据系统启动相应的cqhttp程序即可。cqhttp启动方式可以参看下面的步骤。</p><h1 id="手动安装">手动安装</h1><h2 id="启动框架">启动框架</h2><p>这一节会启动我门的QQ和一个最基本的机器人</p><ol><li>首先<a href="https://file.chrisyy.top/qq-example.zip">下载整合包</a>，随后解压，解压出来的文件应该如下：</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">.<br>|<span class="hljs-comment">-- .env</span><br>|<span class="hljs-comment">-- .env.dev</span><br>|<span class="hljs-comment">-- bot.py</span><br>|<span class="hljs-comment">-- cqhttp</span><br>|<span class="hljs-comment">-- pyproject.toml</span><br>`<span class="hljs-comment">-- src</span><br></code></pre></td></tr></table></figure><p>其中包含cqhttp文件夹和bot.py文件和一些配置文件。</p><p>随后在<code>cqhttp/config.yml</code>中修改为您的QQ号，随后根据系统启动相应的cqhttp程序即可。</p><p>windows推荐在powershell下运行，启动方式，在命令行<code>./go-cqhttp-[你的系统]</code>然后enter即可。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221218173930474.png" alt="image-20221218173930474"></p><ol start="2"><li>第二步安装相关的依赖库。</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> nonebot2<br>pip <span class="hljs-keyword">install</span> nonebot-adapter-onebot<br></code></pre></td></tr></table></figure><ol start="3"><li>启动bot</li></ol><p>在文件夹的根目录输入一下命令即可启动bot</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> bot.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure><p>如果启动成功，可以看到如下的日志</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221217114837304.png" alt="image-20221217114837304"></p><p>这里有几个部分说明：</p><ol><li>第一个框，dev表示我们进入的是dev环境，读取的配置是env.dev，如果是prod请看env文件是否正确设置了环境为dev。</li><li>第二个框，表示读取了config了的配置，如果发现自己的指令没有触发，请检查这里是否正确读取。</li><li>第三个框，表示我们成功加载了那几个插件，<strong>这里我们加载了内置的echo插件</strong>。</li><li>第四个框，表示我们的nonebot和cqhttp成功链接，cqhttp的消息能够转发到nonebot啦！</li></ol><p>随后要与机器人互动，可以首先使用<code>echo</code>命令让其输出一些信息。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221219122546182.png" alt="image-20221219122546182"></p><h2 id="插件安装">插件安装</h2><p>通过包管理器安装，可以通过pip，或者poetry等方式都安装，我们这里以pip为例，在命令行中输入：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> nonebot-plugin-gpt3 playwright -U &amp;&amp; playwright <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>随后在<code>bot.py</code>中加上如下代码，加载插件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">nonebot.load<span class="hljs-constructor">_plugin(&#x27;<span class="hljs-params">nonebot_plugin_gpt3</span>&#x27;)</span><br></code></pre></td></tr></table></figure><p>随后我们可以启动bot，通过<code>python3 bot.py</code>来启动，首次启动会在默认路径API路径<code>config/chatgpt_api_key.yml</code>下生成yml文件，在其中可以配置您的API，如果已经存在了则会直接读取，所以首次启动会加载0个API。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221218172400814.png" alt="image-20221218172400814"></p><p>需要填入API后再次启动就可以发现成功加载了API</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221218172520895.png" alt=""></p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221218172611773.png" alt="image-20221218172611773"></p><h2 id="windows">windows</h2><p>windows的用户还额外需要安装一个rust的环境，<a href="https://file.chrisyy.top/rustup-setup.exe">点击这里下载</a>之后，安装即可。</p><p>插件的更多配置，请看插件主页：</p><p><a href="https://github.com/chrisyy2003/nonebot-plugin-gpt3">https://github.com/chrisyy2003/nonebot-plugin-gpt3</a></p><h1 id="使用">使用</h1><h2 id="基本会话">基本会话</h2><p>对话前，加上前缀即可与GPT3对话。</p><p>​<img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221221203808576.png" alt="image-20221221203808576"></p><h2 id="连续会话">连续会话</h2><p>输入<strong>chat/聊天/开始聊天</strong>即可不加前缀，连续的对话，输入<strong>结束/结束聊天</strong>，即可结束聊天</p><p><a href="https://camo.githubusercontent.com/c54dbe3f8bffb54faf718542eed8166ea2913025184bb97ae9a41dd85dab01b1/68747470733a2f2f636872697379792d696d616765732e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f696d6167652d32303232313231373233303035383937392e706e67"><img src="https://camo.githubusercontent.com/c54dbe3f8bffb54faf718542eed8166ea2913025184bb97ae9a41dd85dab01b1/68747470733a2f2f636872697379792d696d616765732e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f696d6167652d32303232313231373233303035383937392e706e67" alt="image-20221217230058979"></a></p><h2 id="人格设置">人格设置</h2><p>预设了<strong>AI助手/猫娘/nsfw猫娘</strong>三种人格，可以通过人格设置切换。内置的设定可以从<a href="https://github.com/chrisyy2003/nonebot-plugin-gpt3/blob/main/nonebot_plugin_gpt3/__init__.py#L9-L11">这里看到</a>。</p><p><a href="https://camo.githubusercontent.com/f91398823f6c271dc53de2ddfdcbd5ca08b2c7fcab370d4ee5af47cc41311806/68747470733a2f2f636872697379792d696d616765732e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f696d6167652d32303232313231373233313730333631342e706e67"><img src="https://camo.githubusercontent.com/f91398823f6c271dc53de2ddfdcbd5ca08b2c7fcab370d4ee5af47cc41311806/68747470733a2f2f636872697379792d696d616765732e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f696d6167652d32303232313231373233313730333631342e706e67" alt="image-20221217231703614"></a></p><p>同样也可以手动指定人格</p><p><a href="https://camo.githubusercontent.com/67570a1128c160d031c195401c16937b0d34dffd8fb0d70ff14d49714bd56248/68747470733a2f2f636872697379792d696d616765732e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f696d6167652d32303232313231373233323135353130302e706e67"><img src="https://camo.githubusercontent.com/67570a1128c160d031c195401c16937b0d34dffd8fb0d70ff14d49714bd56248/68747470733a2f2f636872697379792d696d616765732e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f696d6167652d32303232313231373233323135353130302e706e67" alt="image-20221217232155100"></a></p><h2 id="图片渲染">图片渲染</h2><p>图片渲染可以在配置文件中配置是否，需要渲染</p><p>图片渲染需要安装额外的依赖，具体看插件主页：<a href="https://github.com/chrisyy2003/nonebot-plugin-gpt3">https://github.com/chrisyy2003/nonebot-plugin-gpt3</a><a href="https://camo.githubusercontent.com/73360f11df6112c2354a34252cef8335b0bfbe3f7576a0638b76925d38eeab00/68747470733a2f2f636872697379792d696d616765732e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f696d6167652d32303232313231373233333732393236332e706e67"><img src="https://camo.githubusercontent.com/73360f11df6112c2354a34252cef8335b0bfbe3f7576a0638b76925d38eeab00/68747470733a2f2f636872697379792d696d616765732e6f73732d636e2d6368656e6764752e616c6979756e63732e636f6d2f696d672f696d6167652d32303232313231373233333732393236332e706e67" alt="image-20221217233729263"></a></p>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Sui Framework分析</title>
    <link href="/intro-sui-framework.html"/>
    <url>/intro-sui-framework.html</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/MystenLabs/sui/tree/main/crates/sui-framework/sources">https://github.com/MystenLabs/sui/tree/main/crates/sui-framework/sources</a></p><h1 id="sui介绍">sui介绍</h1><p>头等舱研报： <a href="https://file.chrisyy.top/315-SUI.pdf">315-SUI.pdf</a></p><h2 id="架构">架构</h2><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221214141259428.png" alt="image-20221214141259428"></p><p>每个 Objects 在 Sui 执行环境中都有一个唯一的 ID，并有指向所有者地址的内部指针。通过使用这些概念，很容易通过检查交易是否使用相同的 Objects 来识别关联。</p><p>通过将声明关联关系的工作转移给开发者，使执行引擎的实施变得更容易，这意味着理论上它可以有更好的性能和可扩展性。然而，这是以不太理想的开发者体验为代价的。</p><h2 id="Sui-Move">Sui Move</h2><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221214141845093.png" alt="image-20221214141845093"></p><h1 id="Framework分析">Framework分析</h1><h2 id="代币">代币</h2><ol><li><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/sui.move">sui</a></li></ol><p>sui平台代币，通过coin模块铸造</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span>(friend) <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">new</span><span class="hljs-params">(ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span>)</span></span>: Supply&lt;SUI&gt; &#123;<br>        let (treasury, metadata) = coin::create_currency(<br>            SUI &#123;&#125;, <br>            <span class="hljs-number">9</span>,<br>            b<span class="hljs-string">&quot;SUI&quot;</span>,<br>            b<span class="hljs-string">&quot;Sui&quot;</span>,<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> add appropriate description and logo url</span><br>            b<span class="hljs-string">&quot;&quot;</span>,<br>            option::none(),<br>            ctx<br>        );<br>        transfer::freeze_object(metadata);<br>        coin::treasury_into_supply(treasury)<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/balance.move">balance</a></li></ol><p>balance可用于任何一般存储金额，余额的地方。例如可以用于 <code>Coin</code> ，可用于实现带有 <code>Supply</code> 和 <code>Balance</code> 的自定义硬币。</p><p>balance只用来存储金额，所以没有key的能力</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Balance</span>&lt;<span class="hljs-title">phantom</span> <span class="hljs-title">T</span>&gt; <span class="hljs-title">has</span> <span class="hljs-title">store</span> &#123;</span><br>        <span class="hljs-symbol">value:</span> u64<br>&#125;<br></code></pre></td></tr></table></figure><p>常见有如下的操作函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> zero<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">()</span></span>: Balance&lt;T&gt; <br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> join<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(self: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Balance</span>&lt;<span class="hljs-type">T</span>&gt;, balance: <span class="hljs-type">Balance</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: u64<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> split<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(self: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Balance</span>&lt;<span class="hljs-type">T</span>&gt;, value: <span class="hljs-type">u64</span>)</span></span>: Balance&lt;T&gt;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> increase_supply<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(self: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Supply</span>&lt;<span class="hljs-type">T</span>&gt;, value: <span class="hljs-type">u64</span>)</span></span>: Balance&lt;T&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> decrease_supply<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(self: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Supply</span>&lt;<span class="hljs-type">T</span>&gt;, balance: <span class="hljs-type">Balance</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: u64<br><br></code></pre></td></tr></table></figure><ol start="3"><li>coin</li></ol><p><code>Coin</code> 类型是平台范围内的同质化代币， <code>Coin</code> 可以理解为安全包装过的<code>Balance</code>类型，它的结构如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> <span class="hljs-type">Coin</span>&lt;<span class="hljs-type">phantom</span> T&gt; has <span class="hljs-built_in">key</span>, store &#123;<br>        id: UID,<br>        <span class="hljs-built_in">balance</span>: <span class="hljs-built_in">Balance</span>&lt;T&gt;<br> &#125;<br><br></code></pre></td></tr></table></figure><p>常见有如下的操作函数：</p><p>基础代币功能</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">public</span> entry <span class="hljs-function"><span class="hljs-keyword">fun</span> join<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(self: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Coin</span>&lt;<span class="hljs-type">T</span>&gt;, c: <span class="hljs-type">Coin</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> split<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(self: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Coin</span>&lt;<span class="hljs-type">T</span>&gt;, split_amount: <span class="hljs-type">u64</span>, ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span>)</span></span>: Coin&lt;T&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> divide_into_n<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(self: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Coin</span>&lt;<span class="hljs-type">T</span>&gt;, n: <span class="hljs-type">u64</span>, ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span>)</span></span><br></code></pre></td></tr></table></figure><p>代币管理</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> create_currency<span class="hljs-type">&lt;T: drop&gt;</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        witness: <span class="hljs-type">T</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        decimals: <span class="hljs-type">u8</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        symbol: <span class="hljs-type">vector</span>&lt;<span class="hljs-type">u8</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        name: <span class="hljs-type">vector</span>&lt;<span class="hljs-type">u8</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        description: <span class="hljs-type">vector</span>&lt;<span class="hljs-type">u8</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        icon_url: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">Url</span>&gt;,</span></span><br><span class="hljs-params"><span class="hljs-function">        ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span></span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span>: (TreasuryCap&lt;T&gt;, CoinMetadata&lt;T&gt;)<br>    <br>    <br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> mint<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(cap: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TreasuryCap</span>&lt;<span class="hljs-type">T</span>&gt;, value: <span class="hljs-type">u64</span>, ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span>)</span></span>: Coin&lt;T&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> mint_balance<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(cap: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TreasuryCap</span>&lt;<span class="hljs-type">T</span>&gt;, value: <span class="hljs-type">u64</span>)</span></span>: Balance&lt;T&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> burn<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(cap: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TreasuryCap</span>&lt;<span class="hljs-type">T</span>&gt;, c: <span class="hljs-type">Coin</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: u64<br><span class="hljs-keyword">public</span> entry <span class="hljs-function"><span class="hljs-keyword">fun</span> mint_and_transfer<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        c: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TreasuryCap</span>&lt;<span class="hljs-type">T</span>&gt;, amount: <span class="hljs-type">u64</span>, recipient: <span class="hljs-type">address</span>, ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span></span></span><br><span class="hljs-params"><span class="hljs-function">    )</span></span><br></code></pre></td></tr></table></figure><p>Balance &lt;-&gt; Coin 的访问器和类型转换方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> from_balance<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(balance: <span class="hljs-type">Balance</span>&lt;<span class="hljs-type">T</span>&gt;, ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span>)</span></span>: Coin&lt;T&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> into_balance<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(coin: <span class="hljs-type">Coin</span>&lt;<span class="hljs-type">T</span>&gt;)</span></span>: Balance&lt;T&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> take<span class="hljs-type">&lt;T&gt;</span><span class="hljs-params">(balance: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Balance</span>&lt;<span class="hljs-type">T</span>&gt;, value: <span class="hljs-type">u64</span>, ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span>)</span></span>: Coin&lt;T&gt;<br></code></pre></td></tr></table></figure><p><strong>这里说说我对Balance和Coin区别的理解：</strong></p><p>Balance属于一个相对宽泛的记账概念，Balance表示的是一种记录数量的资产，而Coin是市场上流动的资产形式，Balance可以存在多种类型，例如货币、支票、保险、负债，Coin只是其中的的货币的表现形式，Coin在逻辑上对应的是可分割的代币，它需要一个记账的载体Balance。 所以Balance的用途并不局限于对于Coin的记账，实际上任何需要记账的地方都可以用到Balance。</p><p>Balance保证了最基础的记账逻辑，例如不能无限增发，复制等等，并且Balance没有KEY的能力，所以也不能直接存放在区块链中。</p><ol start="4"><li><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/pay.move">pay</a></li></ol><p>该模块为钱包和 sui::coin 管理提供方便的功能。</p><h2 id="NFT">NFT</h2><p><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/erc721_metadata.move">https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/erc721_metadata.move</a></p><p><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/devnet_nft.move">https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/devnet_nft.move</a></p><h2 id="数据结构">数据结构</h2><ol><li>bag</li></ol><p>bag是一个异构的map集合。该集合类似于 <code>sui::table</code> 它的键和值不存储在 <code>Bag</code> 值中，而是使用 Sui 的存储 对象系统。 <code>Bag</code> 结构仅充当<strong>对象系统的句柄以检索</strong>那些键和值。</p><p>请注意，这意味着具有完全相同的键值映射的 <code>Bag</code> 值将不会被 在运行时使用 <code>==</code> 相等。</p><p>例如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">bag1</span> = bag::<span class="hljs-title function_ invoke__">new</span>();<br><span class="hljs-keyword">let</span> <span class="hljs-variable">bag2</span> = bag::<span class="hljs-title function_ invoke__">new</span>();<br>bag::<span class="hljs-title function_ invoke__">add</span>(&amp;<span class="hljs-keyword">mut</span> bag1, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>);<br>bag::<span class="hljs-title function_ invoke__">add</span>(&amp;<span class="hljs-keyword">mut</span> bag1, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br>bag::<span class="hljs-title function_ invoke__">add</span>(&amp;<span class="hljs-keyword">mut</span> bag2, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>);<br>bag::<span class="hljs-title function_ invoke__">add</span>(&amp;<span class="hljs-keyword">mut</span> bag2, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// bag1 does not equal bag2, despite having the same entries</span><br><span class="hljs-built_in">assert!</span>(&amp;bag1 != &amp;bag2, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>在它的核心，<code>sui::bag</code> 是 <code>UID</code> 的包装器，允许访问 <code>sui::dynamic_field</code> 同时防止意外搁浅字段值。 <code>UID</code> 可以是 删除，即使它有关联的动态字段，但另一方面，包必须是 空的被销毁。</p><p><strong>table和bag的区别 table的key和value类型初始化的时候就已经确定了，table只能存储同类型的key和value,。</strong></p><p>bag初始化的时候未限制具体类型，bag能存储不同类型的key和value。</p><p>dynamic_field和dynamic_object_field的区别 类似的table和object_table，bag和object_bag的区别，本质上也是dynamic_field和dynamic_object_field的区别</p><ul><li>key的处理: 为了防止和dynamic_field key值冲突, dynamic_object_field对key类型进行了Wrapper。</li><li>加入存储的是一个object: 用dynamic_field存储，通过dynamic_field key值可以直接取到这个object的值，此时用object id在链上进行查询是查不到的 用dynamic_object_field存储, 通过dynamic_object_field key值取到的是这个object id, 需要用object id在链上再次查询才能获取到这个object的值</li></ul><ol start="2"><li><p><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/table.move">table</a></p></li><li><p><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/priority_queue.move">priority_queue</a></p></li></ol><p>使用大根堆实现的优先级队列。</p><h2 id="工具模块">工具模块</h2><ol><li><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/transfer.move">transfer</a></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> transfer<span class="hljs-type">&lt;T: key&gt;</span><span class="hljs-params">(obj: <span class="hljs-type">T</span>, recipient: <span class="hljs-type">address</span>)</span></span><br>native <span class="hljs-function"><span class="hljs-keyword">fun</span> transfer_internal<span class="hljs-type">&lt;T: key&gt;</span><span class="hljs-params">(obj: <span class="hljs-type">T</span>, recipient: <span class="hljs-type">address</span>)</span></span>;<br><br><span class="hljs-keyword">public</span> native <span class="hljs-function"><span class="hljs-keyword">fun</span> freeze_object<span class="hljs-type">&lt;T: key&gt;</span><span class="hljs-params">(obj: <span class="hljs-type">T</span>)</span></span>;<br><br><span class="hljs-keyword">public</span> native <span class="hljs-function"><span class="hljs-keyword">fun</span> share_object<span class="hljs-type">&lt;T: key&gt;</span><span class="hljs-params">(obj: <span class="hljs-type">T</span>)</span></span>;<br><br></code></pre></td></tr></table></figure><ol start="2"><li><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/tx_context.move">tx_context</a></li></ol><p>tx结构</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts">struct TxContext has <span class="hljs-title class_">drop</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">/// The address of the user that signed the current transaction</span><br><span class="hljs-symbol">        sender:</span> address,<br>        <span class="hljs-comment">/// Hash of the current transaction</span><br><span class="hljs-symbol">        tx_hash:</span> vector<span class="hljs-params">&lt;u8&gt;</span>,<br>        <span class="hljs-comment">/// The current epoch number.</span><br><span class="hljs-symbol">        epoch:</span> u64,<br>        <span class="hljs-comment">/// Counter recording the number of fresh id&#x27;s created while executing</span><br>        <span class="hljs-comment">/// this transaction. Always 0 at the start of a transaction</span><br><span class="hljs-symbol">        ids_created:</span> u64<br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>常见有如下的操作函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">sender</span><span class="hljs-params">(self: &amp;<span class="hljs-type">TxContext</span>)</span></span>: address<br><br><span class="hljs-keyword">public</span>(friend) <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">new_object</span><span class="hljs-params">(ctx: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">TxContext</span>)</span></span>: address &#123;<br>        let ids_created = ctx.ids_created;<br>        let id = derive_id(*&amp;ctx.tx_hash, ids_created);<br>        ctx.ids_created = ids_created + <span class="hljs-number">1</span>;<br>        id<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/test_scenario.move">test_scenario</a></li></ol><p>测试框架</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">begin</span><span class="hljs-params">(sender: <span class="hljs-type">address</span>)</span></span>: Scenario<br><br><span class="hljs-comment">/// 将场景推进到新交易，其中 `sender` 是交易发送方 </span><br><span class="hljs-comment">/// 所有转移的对象将被移动到账户或全局的库存中 </span><br><span class="hljs-comment">/// 存货。换句话说，为了访问具有各种“取”之一的对象 </span><br><span class="hljs-comment">/// 下面的函数，例如`take_from_address_by_id`，交易必须先通过 </span><br><span class="hljs-comment">/// `next_tx`。 </span><br><span class="hljs-comment">/// 返回上一次交易的结果 </span><br><span class="hljs-comment">/// 如果共享或不可变对象被删除、传输或包装，将中止。 </span><br><span class="hljs-comment">/// 如果无法生成 TransactionEffects 将中止</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">next_tx</span><span class="hljs-params">(scenario: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Scenario</span>, sender: <span class="hljs-type">address</span>)</span></span>: TransactionEffects<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">end</span><span class="hljs-params">(scenario: <span class="hljs-type">Scenario</span>)</span></span>: TransactionEffects<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">ctx</span><span class="hljs-params">(scenario: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Scenario</span>)</span></span>: &amp;mut TxContext<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">new_object</span><span class="hljs-params">(scenario: &amp;<span class="hljs-type">mut</span> <span class="hljs-type">Scenario</span>)</span></span>: UID<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">created</span><span class="hljs-params">(effects: &amp;<span class="hljs-type">TransactionEffects</span>)</span></span>: vector&lt;ID&gt;<br><br></code></pre></td></tr></table></figure><p>资源操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs move">public fun take_from_address&lt;T: key&gt;(scenario: &amp;Scenario, account: address): T<br>public fun return_to_address&lt;T: key&gt;(account: address, t: T)<br><br>public fun take_shared&lt;T: key&gt;(scenario: &amp;Scenario): T<br>public fun return_shared&lt;T: key&gt;(t: T)<br></code></pre></td></tr></table></figure><h2 id="密码学">密码学</h2><ol><li><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/crypto/bulletproofs.move">bulletproof</a></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">verify_full_range_proof</span><span class="hljs-params">(proof: &amp;<span class="hljs-type">vector</span>&lt;<span class="hljs-type">u8</span>&gt;, commitment: &amp;<span class="hljs-type">RistrettoPoint</span>, bit_length: <span class="hljs-type">u64</span>)</span></span>: bool<br></code></pre></td></tr></table></figure><ol start="2"><li><a href="https://github.com/MystenLabs/sui/blob/main/crates/sui-framework/sources/crypto/groth16.move">groth16</a></li></ol><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// groth16 验证算法，参数</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">verify_groth16_proof</span><span class="hljs-params">(prepared_verifying_key: &amp;<span class="hljs-type">PreparedVerifyingKey</span>, public_proof_inputs: &amp;<span class="hljs-type">PublicProofInputs</span>, proof_points: &amp;<span class="hljs-type">ProofPoints</span>)</span></span>: bool<br><br><span class="hljs-comment">// 获取verify key</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">pvk_from_bytes</span><span class="hljs-params">(vk_gamma_abc_g1_bytes: <span class="hljs-type">vector</span>&lt;<span class="hljs-type">u8</span>&gt;, alpha_g1_beta_g2_bytes: <span class="hljs-type">vector</span>&lt;<span class="hljs-type">u8</span>&gt;, gamma_g2_neg_pc_bytes: <span class="hljs-type">vector</span>&lt;<span class="hljs-type">u8</span>&gt;, delta_g2_neg_pc_bytes: <span class="hljs-type">vector</span>&lt;<span class="hljs-type">u8</span>&gt;)</span></span>: PreparedVerifyingKey<br><br></code></pre></td></tr></table></figure><h1 id="案例">案例</h1><h2 id="hello-move">hello_move</h2><p>为了获得一个<code>Counter</code>计数器对象并且，使得<code>Counter</code>计数器对象中的值增加，我们需要调用合约中的函数。</p><p>在函数<code>getCounter</code>中，存在<code>public</code>，<code>entry</code>修饰符，这保证了我们拥有调用权限，并且可以通过命令行调用。<code>transfer</code>函数的参数为对象接收者地址，在代码中，我们通过<code>tx_context::sender(ctx)</code>来获取发送者地址，<code>ctx</code>是当前交易的上下文，包含此交易的相关信息。</p><p>所以我们首先需要调用<code>getCounter</code>函数，在命令行输入如下命令。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sui client call <span class="hljs-string">\</span><br>    --<span class="hljs-keyword">function</span> getCounter <span class="hljs-string">\</span><br>    --module counter <span class="hljs-string">\</span><br>    --package <span class="hljs-number">0x31f33e53a2c7a2620fc1bbf8140ffc7bde3984fa</span> <span class="hljs-string">\</span><br>    --gas-budget <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>这是一个相当复杂的命令，所以让我们一一解释它的所有参数：</p><ul><li><code>--function</code>：要调用的函数的名称</li><li><code>--module</code>：包含函数的模块的名称</li><li><code>--package</code>：包含函数的模块所在的包对象的 <code>ID</code>。</li><li><code>--gas-budge</code>：是一个十进制数，表示我们交易的gas上限，以避免 gas pay 中所有 gas 的意外耗尽）</li></ul><p>可以发现交易结果中返回了一个新创建的对象<code>ID</code>，很明显这就是我们获得的<code>Counter</code>对象</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128180338202.png" alt=""></p><p>同时在浏览器上可以直接通过对象<code>ID</code>看到<code>counter</code>的<code>value</code>字段的具体值</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128180507340.png" alt=""></p><p>最后我们试图调用<code>incr</code>来使得<code>value</code>的值+1</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sui client call \<br>    <span class="hljs-params">--function</span> incr \<br>    <span class="hljs-params">--module</span> counter \<br>    <span class="hljs-params">--package</span> 0x31f33e53a2c7a2620fc1bbf8140ffc7bde3984fa \<br>    <span class="hljs-params">--args</span> 0x846e1db8383dd68373<span class="hljs-keyword">cd</span>83c6ce5242951d7beb77 \<br>    <span class="hljs-params">--gas-budget</span> 1000<br></code></pre></td></tr></table></figure><p>其中<code>--args</code>用来传递我们的参数，参数格式参考 <a href="https://docs.sui.io/build/sui-json">Sui-JSON</a>值的函数参数列表。</p><p>再次通过浏览器可以发现version（可以理解为修改的次数）被+1，同时<code>value</code>的字段值也成功+1</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128182935767.png" alt="image-20221128182935767"></p><h2 id="test-example">test_example</h2><h2 id="token">token</h2><h1 id="资料">资料</h1><p>sui官方课程：<a href="https://github.com/sui-foundation/sui-move-intro-course">https://github.com/sui-foundation/sui-move-intro-course</a></p><p>sui测试：<a href="https://docs.sui.io/build/move/build-test">https://docs.sui.io/build/move/build-test</a></p><p>案例：<a href="https://examples.sui.io/">https://examples.sui.io/</a></p><p>设计模式：<a href="https://move-patterns.chrisyy.top/">https://move-patterns.chrisyy.top/</a></p>]]></content>
    
    
    <categories>
      
      <category>blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>5分钟在QQ群搭建ChatGPT机器人！</title>
    <link href="/qq-chatGPT.html"/>
    <url>/qq-chatGPT.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>说明：现在的问题在于openai现在高强度更新antibot策略导致绕过策略随时会变，chatgpt插件出现问题后不能及时更新，所以文章中插件部分可能会<strong>出现过时问题导致不能用的情况</strong>。</p><p>但是cqhttp和nonebot<strong>部分的安装教程不会有问题</strong>，<strong>所以依然可以作为参考进行安装</strong>，有问题的都是针对插件。</p><p>此外，建议没有基础的朋友先等待，有基础的可以关注最新方案尝鲜。</p><p>**是小白？**如果你是小白的话，只需要关心如何安装插件就可以了，直接从原教程的<a href="https://blog.chrisyy.top/qq-chatGPT.html#%E5%89%8D%E8%A8%80">前言</a>开始看就可以了，更新内容可以不用看。</p></blockquote><h1 id="遇到问题？">遇到问题？</h1><p>首先可以直接看这里排查是否存在问题，有问题也可以随时留言。</p><blockquote><p>需要提前说明的是，有问题请把问题描述清楚再提问，报错截图也需要把报错信息截图截全然后再发出来提问！</p><p>如果只说：救命，我这个怎么回事…没有人会回你的。</p></blockquote><ol><li>websocket bad handshake</li></ol><p>请查看是否配置了v11适配器，适配器是通过空格选择的，不是enter，在视频6：19秒处。</p><ol start="2"><li>发送指令没有回复</li></ol><p>nonebot默认指令需要在前面加一个<code>/</code>斜杠来触发，请查看文章最后。</p><ol start="3"><li>Too many… 这种问题请挂代理访问。因为cf字段是不断刷新的，有ip限制所以只能发一句。</li></ol><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221216230714181.png" alt=""></p><h1 id="12月16日更新">12月16日更新</h1><p>现在方案已经变为完全的浏览器模拟进行收发消息了，需要的信息也只需要token（token的问题在于会过期）。</p><p>下方的<code>nonebot-plugin-chatgpt</code>插件维护的比较好，<strong>可以继续按照文本安装。</strong></p><p><strong>不过需要注意的是，如果要安装此插件，请在env.dev中的fastapi_reload请设置为false</strong>，<strong>然后需要安装playwright</strong>，具体怎么安装自行查资料。</p><h1 id="12月15日更新">12月15日更新</h1><p><a href="https://github.com/acheong08/ChatGPT/blob/main/src/revChatGPT/revChatGPT.py">revChatGPT</a>仓库已经归档，基于逆向API的bot基本上挂掉了。</p><p>推荐使用API的bot，也就是GPT3而不是ChatGPT。</p><h1 id="12月14日更新">12月14日更新</h1><ol><li>文章提到的nonebot-plugin-chatgpt 插件以及合并了绕过cf的方法，<strong>可以继续按照本文安装。</strong></li><li>关于群中的多账号bot可以直接通过修改<a href="https://github.com/chrisyy2003/lingyin-bot/blob/main/chatgpt_token.json">token.json</a>来完成自己的配置。几个账号就放几个token。</li></ol><p>这两个方法是不同的，第一个是一个插件，第二个是一个群中专用的集成的bot。</p><h1 id="12月13日更新">12月13日更新</h1><blockquote><p>现在在有GUI（图形界面）的机器上可以实现半自动的方法，不过还需要修改插件，有基础的可以自己先试一试。</p></blockquote><ol><li>在桌面环境中：<code>pip3 install revChatGPT==0.0.42.1</code> 安装最新版的revChatGPT，此外还需要安装谷歌浏览器</li><li>随后在test.py文件中【<strong>只</strong>】配置session_token，像下面这样。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;session_token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;YOUR_TOKEN&gt;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>最后test文件如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from revChatGPT<span class="hljs-selector-class">.revChatGPT</span> import Chatbot<br><br>config = &#123;<br>    <span class="hljs-string">&quot;session_token&quot;</span>: <span class="hljs-string">&quot;XX&quot;</span>, #<span class="hljs-selector-id">#token</span><br>    <span class="hljs-string">&quot;proxy&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:6152&quot;</span><br>&#125;<br>chatbot = <span class="hljs-built_in">Chatbot</span>(config, conversation_id=None)<br><br>res = chatbot<span class="hljs-selector-class">.get_chat_response</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(res)</span></span><br></code></pre></td></tr></table></figure><p>程序会弹出浏览器自动获取cf值，能够跑过的话接下来：</p><ol><li>直接安装lingyin-bot</li><li>配置env.dev</li></ol><p>安装方式在主页。（因为这个集成的bot直接依赖这个库的，所以test.py可以，bot就可以）</p><h1 id="Cloudflare的临时解决方案"><s>Cloudflare的临时解决方案</s></h1><p>目前情况是寄了，暂时还没有一个很好的解决办法。</p><p><strong>此方案是可以成功的但是非常麻烦</strong>，群友反馈结果是限制比较大，<strong>需要手动换cf字段值并且cf有效时间只有2小时</strong>，而且调用次数过多就寄，暂时不推荐此方案了。</p><p>可以等等，开发者正在解决问题中，有问题请查看revChatGPT仓库最新commit进行解决。</p><p>加discord关注最新进展，<a href="https://discord.gg/RvBkdcYUrH">https://discord.gg/RvBkdcYUrH</a></p><h2 id="安装步骤">安装步骤</h2><ol><li>首先下载lingyin-bot文件，或者clone<br><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221212171748432.png" alt="image-20221212171748432"></li><li>更新revchatGPT，<code>pip3 install revChatGPT --upgrade</code></li><li>复制图中的cf_clearance的值<br><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221212103154911.png" alt="image-20221212103154911"></li><li>拿到user agent值，User-agent的值看这个图<br><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221212124926694.png" alt="image-20221212124926694"></li><li>然后在 <a href="https://github.com/chrisyy2003/lingyin-bot/blob/main/test.py#L8-L9">https://github.com/chrisyy2003/lingyin-bot/blob/main/test.py#L8-L9</a> 修改为自己的token和cf cookie值和user agent值， 并随后运行<a href="https://github.com/chrisyy2003/lingyin-bot/blob/main/test.py">test.py</a>文件，这是来检查你的信息能够正确的请求，如果test能跑过那么根据bot<a href="https://github.com/chrisyy2003/lingyin-bot">主页</a>的说明安装后，bot就也能跑了。<br>跑过指的是能返回如下的有效消息：</li></ol><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221212103356692.png" alt=""></p><p>如果遇见下面的问题</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221212150847725.png" alt="image-20221212150847725"></p><p>**请确保获取的cf的设备和bot是同一台设备！！！**就是你本地获取的cf就只能本地跑，本地test能过，放到服务器上是不行的，因为需要ip相同。</p><ol start="7"><li>test能过之后就配置bot的env.dev如下图</li></ol><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221212123451926.png" alt=""></p><ol start="8"><li>随后启动bot，启动方法请看lingyin-bot主页</li></ol><h1 id="前言">前言</h1><p>本文将带来快速简单在QQ群中接入ChatGPT的教程。</p><p>接入ChatGPT的安装步骤仅需三步，其中分别是：</p><ol><li>安装cqhttp</li><li>安装nonebot框架</li><li>安装chatGPT插件</li></ol><p>这里简单说一下各个部分的作用：</p><ul><li><strong>go-cqhttp</strong>是基于Onebot协议的一个golang语言的实现。OneBot 是一个聊天机器人应用接口标准，旨在统一不同聊天平台上的机器人应用开发接口。实现了OneBot标准的框架有很多，go-cqhttp只是其中的一种，还有其他的框架例如：<a href="https://link.zhihu.com/?target=https%3A//github.com/Mrs4s/go-cqhttp">go-cqhttp</a>，<a href="https://link.zhihu.com/?target=https%3A//github.com/mamoe/mirai">Mirai</a>等等。它们都解析了QQ协议，使用自己的语言实现了统一的接口，<strong>所以可以直白的理解为它们是模拟的一个QQ客户端。</strong><br>此外采用的协议通常是不是手机或者电脑端，<strong>所以登陆cqhttp并不会被挤下去（但是可能接受消息会收到影响）</strong>。</li><li>第二部分是安装框架，第一步的作用是模拟QQ客户端与QQ服务器进行交流，那么第二部分就是接受这些客户端的消息，并封装这些<strong>发送消息的API接口</strong>，便于我们在<strong>不同的编程语言</strong>中调用。<a href="https://v2.nonebot.dev/">nonebot</a>则是一个使用python语言实现的机器人框架，同时基于其他语言的框架也有很多，例如TypeScript语言实现的<a href="https://link.zhihu.com/?target=https%3A//github.com/koishijs/koishi">koishi</a> 框架等等。</li></ul><p>最后一部分安装自定义插件，这一部分则是是我们真正需要编写的<strong>机器人的逻辑</strong>，如果需要编写插件则需要学习编程语言，但是如果只是使用别人的插件，<strong>则几行命令就可以搞定</strong>。</p><p>所以整个架构大体可以如下图所示</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208150026750.png" alt="image-20221208150026750"></p><h1 id="安装cqhttp">安装cqhttp</h1><h2 id="下载">下载</h2><p>首先安装cqhttp框架，我们从 <a href="https://github.com/Mrs4s/go-cqhttp/releases">release</a> 界面下载最新版本的 go-cqhttp，需要根据不同的系统选择不同的文件：</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208094303224.png" alt="image-20221208094303224"></p><p>这里我保存了最常用的系统（Linux，MacOS，Windows 64位）对应的文件，可以<a href="https://file.chrisyy.top/go-cqhttp-all.zip">直接下载</a>。</p><p>系统类型对应更详细的说明：</p><table><thead><tr><th style="text-align:center">系统类型</th><th style="text-align:center">可执行文件</th><th style="text-align:center">压缩文件</th></tr></thead><tbody><tr><td style="text-align:center">Intel 版 Macos</td><td style="text-align:center">Not available</td><td style="text-align:center"><code>go-cqhttp_darwin_amd64.tar.gz</code></td></tr><tr><td style="text-align:center">M1 版 Macos</td><td style="text-align:center">Not available</td><td style="text-align:center"><code>go-cqhttp_darwin_arm64.tar.gz</code></td></tr><tr><td style="text-align:center">32 位 Linux</td><td style="text-align:center">Not available</td><td style="text-align:center"><code>go-cqhttp_linux_386.tar.gz</code></td></tr><tr><td style="text-align:center">64 位 Linux</td><td style="text-align:center">Not available</td><td style="text-align:center"><code>go-cqhttp_linux_amd64.tar.gz</code></td></tr><tr><td style="text-align:center">arm64 Linux</td><td style="text-align:center">Not available</td><td style="text-align:center"><code>go-cqhttp_linux_arm64.tar.gz</code></td></tr><tr><td style="text-align:center">armv7 Linux</td><td style="text-align:center">Not available</td><td style="text-align:center"><code>go-cqhttp_linux_armv7.tar.gz</code></td></tr><tr><td style="text-align:center">32 位 Windows</td><td style="text-align:center"><code>go-cqhttp_windows_386.exe</code></td><td style="text-align:center"><code>go-cqhttp_windows_386.zip</code></td></tr><tr><td style="text-align:center">64 位 Windows</td><td style="text-align:center"><code>go-cqhttp_windows_amd64.exe</code></td><td style="text-align:center"><code>go-cqhttp_windows_amd64.zip</code></td></tr><tr><td style="text-align:center">arm64 Windows</td><td style="text-align:center"><code>go-cqhttp_windows_arm64.exe</code></td><td style="text-align:center"><code>go-cqhttp_windows_arm64.zip</code></td></tr><tr><td style="text-align:center">armv7 Windows</td><td style="text-align:center"><code>go-cqhttp_windows_armv7.exe</code></td><td style="text-align:center"><code>go-cqhttp_windows_armv7.zip</code></td></tr></tbody></table><h2 id="启动">启动</h2><p>下载完成之后，在Windows下请使用自己熟悉的解压软件自行解压 ，Linux下在命令行中输入 <code>tar -xzvf [文件名]</code>进行解压。</p><p>在Windows 中<strong>双击打开<code>go-cqhttp_*.exe</code></strong>，根据提示生成运行脚本，随后根据提示操作即可。</p><p>在Linux系统中，输入 <code>./go-cqhttp</code>, <code>Enter</code>运行。</p><hr><p>之后我们以Linux系统演示后面的步骤，</p><p>首次启动时，cqhttp会读取当前目录下是否有<code>config.yml</code>文件如果没有则会生成一个<strong>配置文件</strong></p><p>随后<strong>根据提示选择编号3</strong>（因为nonebot暂时只有反向socket），重新启动后如果成功会显示如下信息</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208120226802.png" alt="image-20221208120226802"></p><h2 id="配置">配置</h2><p>cqhttp启动时会读取当前目录下是否有<code>config.yml</code>文件，如果有则会依赖文件中的配置，配置中包含我我们的<strong>账号信息</strong>和<strong>通讯方式</strong>。</p><p>我们需要配置的只有两个地方：</p><ol><li>修改qq账号</li><li>修改<code>ws-reverse</code>中<code>universal</code>为<code> ws://127.0.0.1:8080/onebot/v11/ws</code>最后servers部分的配置如下：</li></ol><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208141937474.png" alt=""></p><h1 id="安装NoneBot">安装NoneBot</h1><p>第二部安装NoneBot框架，这一步建议使用python中虚拟环境进行安装，并确保python版本在3.8以上。</p><blockquote><p>windows中可能不是用python3，而是直接用python，没有生成venv文件夹请看python指令是否正确。</p><p>同理pip3在windows直接是pip</p></blockquote><p>使用venv创建一个虚拟环境，并使用souce加载环境</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> --<span class="hljs-keyword">version</span> 查看版本<br><span class="hljs-keyword">python3</span> -<span class="hljs-keyword">m</span> venv venv<br><span class="hljs-keyword">source</span> venv/bin/activate<br></code></pre></td></tr></table></figure><p><strong>windows下请直接在命令行启动activate例如，并且activate所在的文件夹在windows下名字可能是script</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># powershell启动ps1文件</span><br>./<span class="hljs-built_in">activate</span>.ps1<br><br><span class="hljs-comment"># cmd命令行启动bat文件</span><br>./<span class="hljs-built_in">activate</span>.bat<br></code></pre></td></tr></table></figure><p>如果报错请查一下相关资料，如果加载成功可以看到命令行前带有<strong>venv提示符</strong>：</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208142423327.png" alt="image-20221208142423327"></p><p>随后使用pip3安装nonebot脚手架，并通过nb命令创建bot代码，通过<code>nb run</code>运行bot具体可以参考<a href="https://v2.nonebot.dev/docs/start/installation">nonebot</a>文档</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> nb-cli<br>pip3 <span class="hljs-keyword">install</span> nonebot-adapter-onebot <span class="hljs-comment"># 安装适配器</span><br>nb <span class="hljs-comment"># 生成bot文件</span><br></code></pre></td></tr></table></figure><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221209140937584.png" alt="image-20221209140937584"></p><p><strong>请注意！！请注意！！请注意！！</strong><br><strong>在adapter这里【使用空格】来选择OneBot V11适配器</strong>，最后选择完结果如下。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208125102633.png" alt="image-20221208125102633"></p><p>如果你配置成功你的目录应该是如下的形式</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">.<br>├── <span class="hljs-keyword">bot</span><br><span class="hljs-keyword"></span>│   └── <span class="hljs-keyword">bot.py</span><span class="hljs-comment"># 创建的bot的启动文件</span><br>├── cqhttp<br>└── venv<br>    ├── <span class="hljs-keyword">bin</span><span class="hljs-comment"># windows下名字可能是script</span><br>    ├── include<br>    ├── lib<br>    └── pyvenv.cfg<br></code></pre></td></tr></table></figure><p>至此Bot已经基本配置成功，并且安装了一个最简单的内置echo插件（可选的），<strong>随后进入刚刚创建的bot文件夹</strong>，使用<code>nb run</code>启动bot或者使用python3 bot来启动</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">nb <span class="hljs-built_in">run</span> <span class="hljs-comment">#启动bot</span><br></code></pre></td></tr></table></figure><p>如果启动成功，可以看到如下的日志</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221217114837304.png" alt="image-20221217114837304"></p><p>这里有几个部分说明：</p><ol><li>第一个框，dev表示我们进入的是dev环境，读取的配置是env.dev，如果是prod请看env文件是否正确设置了环境为dev。</li><li>第二个框，表示读取了config了的配置，如果发现自己的指令没有触发，请检查这里是否正确读取。</li><li>第三个框，表示我们成功加载了那几个插件，<strong>这里我们加载了内置的echo</strong>。</li><li>第四个框，表示我们的nonebot和cqhttp成功链接，cqhttp的消息能够转发到nonebot啦！</li></ol><p>随后要与机器人互动，可以首先使用<code>/echo</code>命令让其输出一些信息，斜杠<code>/</code>是nonebot默认的命令起始符号，可以自定义设置。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208142819097.png" alt="image-20221208142819097"></p><h1 id="安装插件">安装插件</h1><p>最后一步安装我们自定的插件，使用nb直接安装</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">nb <span class="hljs-keyword">plugin</span> install nonebot-<span class="hljs-keyword">plugin</span>-chatgpt<br></code></pre></td></tr></table></figure><p>安装完成之后，我们需要配置一些信息，在创建机器人根目录下中<code>.env.dev</code>文件中填入</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">CHATGPT_SESSION_TOKEN</span>=<span class="hljs-string">&quot;XXX&quot;</span>     <span class="hljs-comment"># token信息</span><br><span class="hljs-attr">CHATGPT_COMMAND</span>=<span class="hljs-string">&quot;chat&quot;</span>          <span class="hljs-comment"># 触发聊天的命令</span><br><span class="hljs-attr">CHATGPT_TO_ME</span>=<span class="hljs-string">&quot;False&quot;</span>           <span class="hljs-comment"># 是否需要@机器人</span><br></code></pre></td></tr></table></figure><p>最后文件显示如下：</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208160709537.png" alt="image-20221208160709537"></p><p>启动bot使用<code>nb run</code>命令，可以在输出信息中查看我们的插件是否被加载.</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208143447455.png" alt="image-20221208143447455"></p><p>最后效果如下</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208143538843.png" alt="image-20221208143538843"></p><p>最后，如果不需要斜杠<code>/</code>来触发命令，则在<code>.env.dev</code>文件中配置如下即可。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">command_start</span>=[<span class="hljs-string">&quot;&quot;</span>]<br></code></pre></td></tr></table></figure><p>那么配置之后的效果则是通过<strong>chat可以直接触发</strong></p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221208162320883.png" alt="image-20221208162320883"></p><p>关于上文的插件更多的配置可以参考<a href="https://github.com/A-kirami/nonebot-plugin-chatgpt">仓库链接</a></p><p>更多的插件请参考<a href="https://v2.nonebot.dev/store">nonebot商店</a></p><h1 id="多账号插件">多账号插件</h1><blockquote><p>12月15日更新：项目源于ChatGPT公测一周的时间内，群中500+人数导致的请求频率问题，从而需要多个Bot分担请求压力。</p><p>此项目是直接基于revChatGPT，基于逆向方式插件并不调用API接口，并且API接口也不需要多账号。</p><p>目前cloudflare的限制，revChatGPT仓库归档，存在不加代理启动成功之后，只能回复一句话的问题，<strong>所以暂时插件问题比较多，不能保证插件能用。</strong></p><p>（不加代理并基于逆向API的应该都有这个问题）。</p></blockquote><p>有兴趣的小伙伴可以加入Fabric闲聊群（然而都在玩ChatGPT）群里有配置好的机器人。</p><p>此外群中的机器人并没有使用以上提到的<code>nonebot-plugin-chatgpt</code>插件，而是自己开发的一个多<code>session_token</code>的<code>chatGPT</code>插件，从而满足群中请求量过多导致的API限制问题，使用一下命令安装</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pip3 <span class="hljs-keyword">install </span>nonebot-plugin-<span class="hljs-keyword">multi-chatgpt </span>--upgrade<br></code></pre></td></tr></table></figure><p>随后在<code>bot.py</code>中加上如下代码，加载插件</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">nonebot.load<span class="hljs-constructor">_plugin(&#x27;<span class="hljs-params">nonebot_plugin_multi_chatgpt</span>&#x27;)</span><br></code></pre></td></tr></table></figure><p>具体配置方法请查lingyin-bot中的<a href="https://github.com/chrisyy2003/lingyin-bot/blob/main/.env.dev#L11-L24">配置文件</a>示例，和<a href="https://github.com/chrisyy2003/lingyin-bot/tree/main/plugins/chatGPT">插件主页</a></p>]]></content>
    
    
    <categories>
      
      <category>other</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Sui Move合约开发入门(1)</title>
    <link href="/hello-sui-1.html"/>
    <url>/hello-sui-1.html</url>
    
    <content type="html"><![CDATA[<h1 id="Sui简单介绍">Sui简单介绍</h1><p>Sui 是由 Mysten Labs 团队开发的高性能公链，目标是建设安全、高效、大规模使用的智能合约平台，完善的web 3基础设施，Sui主要相比于其他区块链有以下特点：</p><ul><li>区分了简单交易和复杂交易，采用不同的共识机制，实行大规模并行计算。</li><li>采用“面向资源”的 Sui Move 语言，提供更具备安全性和可组合性的区块链编程语言。</li></ul><p>Aptos 和 Sui 都采用了Move这一语言，不过，具体使用的模型略有不同。Aptos 使用 Diem 团队创建的Core Move 语言，而 Sui 正在利用他们自己的替代版本，称为“Sui Move”，对象是Sui Move中最基础的概念，像组织数据，某款 NFT 、某个代币的余额、某项智能合约，这些都是不同的对象，</p><p>这意味着 Sui 链上的交易可以根据对象的不同可以来分组处理。使得大规模并行计算成为可能。下图是一个简单的例子，描述了可分为 3 组的 5 笔不同交易。这 3 组交易完全可以实现并行处理。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221129160713548.png" alt="image-20221129160713548"></p><h1 id="环境搭建">环境搭建</h1><p>本节可以了解到如何安装和配置 Sui，在安装 Sui 之前，您需要安装一些必备工具并配置您的开发环境。</p><h2 id="工具安装">工具安装</h2><p>Sui 需要在所有支持的操作系统上使用 Rust 和 Cargo。一些操作系统需要 cURL 来下载 Rust 和 Cargo，因此如有必要，请检查相关先决条件部分以先安装 cURL，接下来的安装我们以Linux系统为例。</p><p>使用以下命令在 macOS 或 Linux 上安装 Rust 和 Cargo：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">curl <span class="hljs-attr">--proto</span> <span class="hljs-string">&#x27;=https&#x27;</span> <span class="hljs-attr">--tlsv1</span>.<span class="hljs-number">2</span> -sSf https:<span class="hljs-comment">//sh.rustup.rs | sh</span><br></code></pre></td></tr></table></figure><p>随后安装</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt-<span class="hljs-built_in">get</span> install curl git-<span class="hljs-built_in">all</span> libssl-<span class="hljs-built_in">dev</span> libclang-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h2 id="安装Sui">安装Sui</h2><p>安装 Cargo 后，使用以下命令安装 Sui 二进制文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cargo install --locked --git https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/MystenLabs/</span>sui.git --branch devnet sui<br></code></pre></td></tr></table></figure><p>输入以下命令查看安装是否成功</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sui <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h2 id="命令行">命令行</h2><p>安装完Sui 二进制文件后，我们便可以与Sui Devnet交互。</p><p>要将 Sui 客户端连接到 Sui Devnet，请运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sui client<br></code></pre></td></tr></table></figure><p>当客户端第一次启动时，Sui CLI 会打印以下行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Config file [&quot;/Users/dir/.sui/sui_config/client.yaml&quot;] doesn&#x27;t exist, do you want to connect to a Sui RPC server [y/n]?<br></code></pre></td></tr></table></figure><p>键入<code>y</code>然后按<code>Enter</code>。您应该看到以下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Sui RPC server Url (Default to Sui Devnet if not specified) :<br></code></pre></td></tr></table></figure><p>Sui 客户端会提示您输入 RPC 服务器 URL。按 Enter 以使用 Devnet 的默认值。您还可以输入自定义 URL 以连接到自定义 RPC 端点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Select key scheme to generate keypair (0 for ed25519, 1 for secp256k1):<br></code></pre></td></tr></table></figure><p>键入<code>0</code>或<code>1</code>选择密钥方案，并创建了账户地址为<code>0x15bfbffe3425ad6e8e61fcc93bfb5c3ee4145d29</code></p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128163950591.png" alt="image-20221128163950591"></p><p>如果想重置客户端配置，可以删除用户下的sui文件夹即可</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">rm ~<span class="hljs-regexp">/.sui/</span>sui_config<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><h2 id="获取测试代币">获取测试代币</h2><p>通过以上步骤，我们获得了一个可以使用的账户和对应的助记词信息</p><p>输入Sui console进入Sui控制台，随后输入<code>active-address</code>查看当前默认地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sui client active-address<br></code></pre></td></tr></table></figure><p>要获得测试代币可以在sui wallet中导入之前的助记词信息，随后点击request按钮即可。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221129165314088.png" alt=""></p><p>第二种方式是加入<a href="https://discord.gg/sui">Discord</a>，在<a href="https://discord.com/channels/916379725201563759/971488439931392130">faucet频道</a>输入你的地址，从而获取代币。例如（注意前面的感叹号）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs solidity">!faucet 0x1083871113de333758c3d46136030d573f09ae18<br></code></pre></td></tr></table></figure><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(8).png" alt=""></p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(9).png" alt=""></p><p>输入地址</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(10).png" alt=""></p><p>随后查看gas，请求一次会获得5个Sui代币</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/20221128165808.png" alt=""></p><h1 id="合约目录结构">合约目录结构</h1><p>Move中的代码组织（和分发）的主要单位是<strong>包</strong>。包由一组模块组成，这些模块定义在<code>.move</code>扩展名的单独文件中。这些文件包括 Move 函数和类型定义。一个Move包必须包含<code>Move.toml</code>描述包配置的清单文件，例如包元数据或包依赖项。在我们先不要担心模块的其余内容，稍后您可以在 Move 书中阅读更多关于<a href="https://movebook.chrisyy.top/modules-and-scripts.html">模块的内容</a></p><p>首先，我们创建一个空的 Move 包：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sui move <span class="hljs-keyword">new</span> hello_world<br></code></pre></td></tr></table></figure><p>这将创建一个名叫hello_world的Move包，包含<code>toml</code>文件和<code>sources</code>文件夹，这一个最简单的包目录结构如下所示：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">.</span><br><span class="hljs-bullet"></span>├── Move.toml<br>└── sources<br></code></pre></td></tr></table></figure><p>查看Move.toml文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[package]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;hello_world&quot;</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.0.1&quot;</span><br><br><span class="hljs-section">[dependencies]</span><br><span class="hljs-attr">Sui</span> = &#123; git = <span class="hljs-string">&quot;https://github.com/MystenLabs/sui.git&quot;</span>, subdir = <span class="hljs-string">&quot;crates/sui-framework&quot;</span>, rev = <span class="hljs-string">&quot;devnet&quot;</span> &#125;<br><br><span class="hljs-section">[addresses]</span><br><span class="hljs-attr">hello_world</span> =  <span class="hljs-string">&quot;0x0&quot;</span><br><span class="hljs-attr">sui</span> =  <span class="hljs-string">&quot;0000000000000000000000000000000000000002&quot;</span><br></code></pre></td></tr></table></figure><p>其中内容有：</p><ul><li>名称和版本（<code>[package]</code>部分）</li><li>此包依赖的其他包（<code>[dependencies]</code>部分）。该包只依赖Sui Framework，其他第三方依赖需要在这里添加。</li><li>命名地址列表（<code>[addresses]</code>部分）。这些名称可以用作源代码中给定地址的方便别名。</li></ul><h1 id="第一个Move合约">第一个Move合约</h1><h2 id="编写">编写</h2><p>让我们从在包中创建一个源文件开始我们的合约：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch hello_world/sources/my_module.move<br></code></pre></td></tr></table></figure><p>在文件中填入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs move">module hello_world::counter &#123;<br>    // Part 1: imports<br>    use sui::transfer;<br>    use sui::object::&#123;Self, UID&#125;;<br>    use sui::tx_context::&#123;Self, TxContext&#125;;<br><br>    // Part 2: struct definition<br>    struct Counter has key &#123;<br>        id: UID,<br>        value: u64,<br>    &#125;<br><br>    // Part 3: transfer the counter object to the sender<br>    entry public fun getCounter(ctx: &amp;mut TxContext) &#123;<br>        // sender address<br>        let sender = tx_context::sender(ctx);<br>        let counter_obj = Counter &#123;<br>            id: object::new(ctx),<br>            value: 0<br>        &#125;;<br>        transfer::transfer(counter_obj, sender);<br>    &#125;<br><br>    // part 4: public/ entry functions<br>    public entry fun incr(counter: &amp;mut Counter) &#123;<br>        counter.value = counter.value + 1;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>此合约的功能是一个简单的计数器合约：</p><ul><li>用户可以调用<code>getCounter</code>获得一个<code>Counter</code>计数器对象</li><li>用户可以调用并且能够让他的<code>value</code>值+1</li></ul><p>让我们分解这段代码为四个不同部分：</p><ol><li>Part1导入：这些允许我们的模块使用在其他模块中声明的类型和函数。在此模块中，我们从三个不同的模块中引入导入，分别是<code>transfer</code>，<code>object</code>，<code>tx_context</code>，其作用我们在下文解释。</li><li>Part2结构声明：这里定义了可以由该模块创建/销毁的类型。这里的<code>key</code> 表明这些结构是作为全局索引资源。<code>store</code>能力允许它存储在其他结构的字段中并可以自由转移。</li><li>Part3<code>getCounter</code>函数：向调用者转入一个<code>Counter</code>对象</li><li>Part4<code>incr</code>函数：传入一个对象的可变引用，并对其value字段+1</li></ol><p>合约一开始引入了<code>transfer</code>库，<code>transfer</code>函数有两个参数一个是被对象，二是接受者地址，能够转让一个对象的所有权给另一个地址，同时这个对象必须有一个全局独一无二的<code>ID</code>也就是<code>Counter</code>中的<code>id</code>字段，这个<code>ID</code>就是由<code>object</code>中的<code>new</code>函数生成，<code>new</code>函数接受当前交易的上下文作为参数，从而生成一个独一无二的<code>ID</code>。</p><p>编写完成之后，我们需要位于项目的根目录，然后使用<code>sui move build</code>来编译它。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sui move build<br></code></pre></td></tr></table></figure><p>成功的构建会返回类似于以下内容的响应：</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128172210962.png" alt=""></p><p>如果构建失败，可以通过日志输出中的错误信息来排除和解决问题。</p><h2 id="部署">部署</h2><p>现在我们已经能够编译合约，那么这一节让我们发布我们的合约。</p><p>首先确保我们的账户已经有一定的测试代币</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128173051186.png" alt=""></p><p>发布合约和调用合约，我们都可以使用 Sui CLI 客户端来完成。</p><p>Sui中的发布命令<code>publish</code>要求我们指定用户定义包所在的目录。同时需要设置gas消耗一个上限，我们使用 1000 作为我们的 gas 预算，所以通过如下命令来发布我们的合约。更多的命令请参阅 <a href="https://docs.sui.io/build/cli-client">Sui CLI 客户端文档。</a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sui client publish <span class="hljs-comment">--gas-budget 10000</span><br></code></pre></td></tr></table></figure><p>发布时，Sui还会再次编译，随后会返回交易哈希，发布结果，交易结果等等。这些信息可以通过交易哈希在<a href="https://explorer.sui.io/transactions/M7SLyxPpt2kXi0idQ4ANNAYg3pw3BfulZhEf9z3L%2F0w%3D">区块浏览器</a>上找到。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128174742826.png" alt=""></p><p>可以发现，运行此命令会创建一个<code>Immutable</code>类型的对象（0x31f33e53a2c7a2620fc1bbf8140ffc7bde3984fa），在sui中的对象包含三种类型：</p><ul><li><p><code>owned</code>：这是 Move 对象最常见的对象。在Sui中每一个对象都属于一个地址，并且这个拥有权可以在 Move 代码中<a href="https://docs.sui.io/build/move/sui-move-library">转移</a>到另一个地址。</p></li><li><p><code>immutable</code>：这意味着一个对象是不可变的，不能被任何人改变。因此，这样的对象没有拥有者。任何人都可以在他们的 Move 通话中使用它。并且所有 Move 包都是不可变对象：一旦发布，就无法更改。在Move代码中可以通过<a href="https://docs.sui.io/build/move/sui-move-library">freeze_object</a>库 API将对象变成不可变对象。不可变对象只能作为只读引用 ( <code>&amp;T</code>) 在 Move 调用中传递。</p></li><li><p><code>shared</code>：对象可以共享，这意味着任何人都可以读取或写入该对象。与可变拥有的对象（单写者）相比，共享对象需要<a href="https://docs.sui.io/learn/architecture/consensus">共识</a>来排序读取和写入。有关创建和访问共享对象的示例，请参阅https://examples.sui.io/上的<a href="https://examples.sui.io/basics/shared-object.html#shared-object">共享对象</a>。</p></li></ul><p>在交易最后，我们看到用于支付发布费用的 gas 对象（0x2c45ed66ecff9e49ff14938cc557016065307fea）由于支付了gas费从而也被修改了。</p><h2 id="调用">调用</h2><p>为了获得一个<code>Counter</code>计数器对象并且，使得<code>Counter</code>计数器对象中的值增加，我们需要调用合约中的函数。</p><p>在函数<code>getCounter</code>中，存在<code>public</code>，<code>entry</code>修饰符，这保证了我们拥有调用权限，并且可以通过命令行调用。<code>transfer</code>函数的参数为对象接收者地址，在代码中，我们通过<code>tx_context::sender(ctx)</code>来获取发送者地址，<code>ctx</code>是当前交易的上下文，包含此交易的相关信息。</p><p>所以我们首先需要调用<code>getCounter</code>函数，在命令行输入如下命令。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sui client call <span class="hljs-string">\</span><br>    --<span class="hljs-keyword">function</span> getCounter <span class="hljs-string">\</span><br>    --module counter <span class="hljs-string">\</span><br>    --package <span class="hljs-number">0x31f33e53a2c7a2620fc1bbf8140ffc7bde3984fa</span> <span class="hljs-string">\</span><br>    --gas-budget <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>这是一个相当复杂的命令，所以让我们一一解释它的所有参数：</p><ul><li><code>--function</code>：要调用的函数的名称</li><li><code>--module</code>：包含函数的模块的名称</li><li><code>--package</code>：包含函数的模块所在的包对象的 <code>ID</code>。</li><li><code>--gas-budge</code>：是一个十进制数，表示我们交易的gas上限，以避免 gas pay 中所有 gas 的意外耗尽）</li></ul><p>可以发现交易结果中返回了一个新创建的对象<code>ID</code>，很明显这就是我们获得的<code>Counter</code>对象</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128180338202.png" alt=""></p><p>同时在浏览器上可以直接通过对象<code>ID</code>看到<code>counter</code>的<code>value</code>字段的具体值</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128180507340.png" alt=""></p><p>最后我们试图调用<code>incr</code>来使得<code>value</code>的值+1</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">sui client call \<br>    <span class="hljs-params">--function</span> incr \<br>    <span class="hljs-params">--module</span> counter \<br>    <span class="hljs-params">--package</span> 0x31f33e53a2c7a2620fc1bbf8140ffc7bde3984fa \<br>    <span class="hljs-params">--args</span> 0x846e1db8383dd68373<span class="hljs-keyword">cd</span>83c6ce5242951d7beb77 \<br>    <span class="hljs-params">--gas-budget</span> 1000<br></code></pre></td></tr></table></figure><p>其中<code>--args</code>用来传递我们的参数，参数格式参考 <a href="https://docs.sui.io/build/sui-json">Sui-JSON</a>值的函数参数列表。</p><p>再次通过浏览器可以发现version（可以理解为修改的次数）被+1，同时<code>value</code>的字段值也成功+1</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image-20221128182935767.png" alt="image-20221128182935767"></p><p>以上是Sui Move合约开发入门的第一节，<a href="https://github.com/chrisyy2003/sui-by-example/tree/main/hello_world">此处</a>可以查看本文提到的代码。在Sui入门的第二节会来带Sui中的<code>Event</code>，初始化<code>Init</code>函数和Sui合约测试的相关内容。</p>]]></content>
    
    
    <categories>
      
      <category>blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL</title>
    <link href="/mysql-note.html"/>
    <url>/mysql-note.html</url>
    
    <content type="html"><![CDATA[<h1 id="数据库三大范式是什么">数据库三大范式是什么</h1><ol><li>第一范式：每个列都不可以再拆分。</li><li>第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依<br>赖于主键的一部分。</li><li>第三范式：在第二范式的基础上，非主键列只依赖于主键，不依赖于其他<br>非主键。</li></ol><p>在设计数据库结构的时候，要尽量遵守三范式，如果不遵守，必须有足够<br>的理由。比如性能。事实上我们经常会为了性能而妥协数据库的设计。</p><h1 id="MySQL-执行流程">MySQL 执行流程</h1><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(7).png" alt=""></p><p>MySQL 的架构共分为两层：<strong>Server 层和存储引擎层</strong>，</p><ul><li><strong>Server 层负责建立连接、分析和执行 SQL</strong>。MySQL 大多数的核心功能模块都在这实现，主要包括连接器，查询缓存、解析器、预处理器、优化器、执行器等。另外，所有的内置函数（如日期、时间、数学和加密函数等）和<strong>所有跨存储引擎的功能</strong>（如存储过程、触发器、视图等。）都在 Server 层实现。</li><li><strong>存储引擎层负责数据的存储和提取</strong>。支持 InnoDB、MyISAM、Memory 等多个存储引擎，不同的存储引擎共用一个 Server 层。现在最常用的存储引擎是 InnoDB，从 MySQL 5.5 版本开始， InnoDB 成为了 MySQL 的默认存储引擎。我们常说的索引数据结构，就是由存储引擎层实现的，不同的存储引擎支持的索引类型也不相同，比如 InnoDB 支持索引类型是 B+树 ，且是默认使用，也就是说在数据表中创建的主键索引和二级索引默认使用的是 B+ 树索引。</li></ul><h1 id="MyISAM-与-InnoDB-区别">MyISAM 与 InnoDB 区别</h1><ol><li>InnoDB 支持事务，MyISAM 不支持事务。</li><li>InnoDB 支持外键，而 MyISAM 不支持。</li><li>InnoDB 最小的锁粒度是行锁，MyISAM 最小的锁粒度是表锁。一个更新语句会锁住整张表，导致其他查询和更新都会被阻塞，因此并发访问受限。</li></ol><h1 id="索引">索引</h1><p>索引是一种数据结构，包含数据表里所有记录的引用指针</p><h2 id="索引分类">索引分类</h2><p>我们可以按照四个角度来分类索引。</p><ul><li>按「数据结构」分类：<strong>B+tree索引、Hash索引、Full-text索引</strong>。</li><li>按「物理存储」分类：<strong>聚簇索引（主键索引）、二级索引（辅助索引）</strong>。</li><li>按「字段特性」分类：<strong>主键索引、唯一索引、普通索引、前缀索引</strong>。</li><li>按「字段个数」分类：<strong>单列索引、联合索引</strong>。</li></ul><h2 id="为什么选择B-Tree">为什么选择B+Tree</h2><p>对于自平衡二叉树虽然能保持查询操作的时间复杂度在O(logn)，但是因为它本质上是一个二叉树，每个节点只能有 2 个子节点，<strong>那么当节点个数越多的时候，树的高度也会相应变高</strong>，这样就会增加磁盘的 I/O 次数，从而影响数据查询的效率。</p><p><strong>为了解决降低树的高度的问题，后面就出来了 B 树</strong>，它不再限制一个节点就只能有 2 个子节点，而是允许 M 个子节点 (M&gt;2)，从而降低树的高度。</p><p>相对于B Tree，B+Tree有如下优点：</p><ol><li><strong>单点查询</strong><br><strong>B 树的查询波动会比较大</strong>，因为每个节点即存索引又存记录，所以有时候访问到了非叶子节点就可以找到索引，而有时需要访问到叶子节点才能找到索引。<br><strong>B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I/O次数会更少</strong>。</li><li><strong>插入和删除效率</strong><br>B+ 树有大量的冗余节点，这样使得删除一个节点的时候，可以直接从叶子节点中删除，甚至可以不动非叶子节点，这样删除非常快<br>B 树则不同，B 树没有冗余节点，删除节点的时候非常复杂，比如删除根节点中的数据，可能涉及复杂的树的变形</li><li>范围查找<br>B 树和 B+ 树等值查询原理基本一致，<strong>先从根节点查找，然后对比目标数据的范围，最后递归的进入子节点查找。</strong></li></ol><p>因为 <strong>B+ 树所有叶子节点间还有一个链表进行连接，这种设计对范围查找非常有帮助</strong>，比如说我们想知道 12 月 1 日和 12 月 12 日之间的订单，这个时候可以先查找到 12 月 1 日所在的叶子节点，<strong>然后利用链表向右遍历</strong>，直到找到 12 月12 日的节点，这样就不需要从根节点查询了，进一步节省查询需要的时间。<br>而 <strong>B 树没有</strong>将所有叶子节点用链表串联起来的结构，因此<strong>只能通过树的遍历来完成范围查询</strong></p><p>因此，存在大量范围检索的场景，适合使用 B+树，比如数据库。<strong>而对于大量的单个索引查询的场景，可以考虑 B 树，比如 nosql 的MongoDB</strong>。</p><h2 id="什么时候适用索引"><strong>什么时候适用索引</strong></h2><ul><li>字段有<strong>唯一性限制的，比如商品编码；</strong></li><li><strong>经常用于 <code>WHERE</code> 查询条件的字段</strong>，这样能够提高整个表的查询速度，如果查询条件不是一个字段，可以建立联合索引。</li><li><strong>经常用于 <code>GROUP BY</code> 和 <code>ORDER BY</code> 的字段</strong>，这样在查询的时候就不需要再去做一次排序了，因为我们都已经知道了建立索引之后在 B+Tree 中的记录都是排序好的。</li></ul><h2 id="什么时候不需要创建索引"><strong>什么时候不需要创建索引</strong></h2><ul><li><code>WHERE</code> 条件，<code>GROUP BY</code>，<code>ORDER BY</code> 里用不到的字段，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的，因为索引是会占用物理空间的。</li><li><strong>字段中存在大量重复数据，不需要创建索引</strong>，比如性别字段，只有男女，如果数据库表中，男女的记录分布均匀，那么无论搜索哪个值都可能得到一半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全表扫描。</li><li>表数据太少的时候，不需要创建索引；</li><li>经常更新的字段不用创建索引，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护 B+Tree的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。</li></ul><h2 id="索引优化">索引优化</h2><p>这里说一下几种常见优化索引的方法：</p><ul><li>前缀索引优化，使用某个字段中字符串的前几个字符建立索引</li><li>覆盖索引优化；</li><li>主键索引最好是自增的；</li><li>防止索引失效<br>第一原因：索引列存在 NULL 就会导致优化器在做索引选择的时候更加复杂，更加难以优化<br>第二个原因：NULL 值是一个没意义的值，但是它会占用物理空间，带来存储空间的问题</li></ul><h1 id="事务">事务</h1><p>事务看起来感觉简单，但是要实现事务必须要遵守 4 个特性，分别如下：</p><ul><li><strong>原子性（Atomicity）</strong>：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节，而且事务在执行过程中发生错误，会被回滚到事务开始前的状态，就像这个事务从来没有执行过一样，就好比买一件商品，购买成功时，则给商家付了钱，商品到手；购买失败时，则商品在商家手中，消费者的钱也没花出去。</li><li><strong>一致性（Consistency）</strong>：是指事务操作前和操作后，数据满足完整性约束，数据库保持一致性状态。比如，用户 A 和用户 B 在银行分别有 800 元和 600 元，总共 1400 元，用户 A 给用户 B 转账 200 元，分为两个步骤，从 A 的账户扣除 200 元和对 B 的账户增加 200 元。一致性就是要求上述步骤操作后，最后的结果是用户 A 还有 600 元，用户 B 有 800 元，总共 1400 元，而不会出现用户 A 扣除了 200 元，但用户 B 未增加的情况（该情况，用户 A 和 B 均为 600 元，总共 1200 元）。</li><li><strong>隔离性（Isolation）</strong>：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致，因为多个事务同时使用相同的数据时，不会相互干扰，每个事务都有一个完整的数据空间，对其他并发事务是隔离的。也就是说，消费者购买商品这个事务，是不影响其他消费者购买的。</li><li><strong>持久性（Durability）</strong>：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><p>InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？</p><ul><li>持久性是通过 redo log （重做日志）来保证的；</li><li>原子性是通过 undo log（回滚日志） 来保证的；</li><li>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；</li><li>一致性则是通过持久性+原子性+隔离性来保证；</li></ul><h2 id="并行事务">并行事务</h2><p><strong>如果一个事务「读到」了另一个「未提交事务修改过的数据」，就意味着发生了「脏读」现象。也就是读取到随时可能回滚的事务。</strong></p><p><strong>在一个事务内多次读取同一个数据，如果出现前后两次读到的数据不一样的情况，就意味着发生了「不可重复读」现象。</strong></p><p><strong>在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。</strong></p><p>这三个现象的严重性排序如下：</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image.png" alt=""></p><p>SQL 标准提出了四种隔离级别来规避这些现象，隔离级别越高，性能效率就越低，这四个隔离级别如下：</p><ul><li><strong>读未提交（<em>read uncommitted</em>）</strong>，指一个事务还没提交时，它做的变更就能被其他事务看到；</li><li><strong>读提交（<em>read committed</em>）</strong>，指一个事务提交之后，它做的变更才能被其他事务看到；</li><li><strong>可重复读（<em>repeatable read</em>）</strong>，指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的，<strong>MySQL InnoDB 引擎的默认隔离级别</strong>；</li><li><strong>串行化（<em>serializable</em> ）</strong>；会对记录加上读写锁，在多个事务对这条记录进行读写操作时，如果发生了读写冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行；</li></ul><p>按隔离水平高低排序如下：</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/image%20(1).png" alt=""></p><p><strong>InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它通过next-key lock 锁（行锁和间隙锁的组合）来锁住记录之间的“间隙”和记录本身，防止其他事务在这个记录之间插入新的记录，这样就避免了幻读现象。</strong></p><p>这四种隔离级别具体是如何实现的呢？</p><ul><li>对于「读未提交」隔离级别的事务来说，因为可以读到未提交事务修改的数据，所以直接读取最新的数据就好了；</li><li>对于「串行化」隔离级别的事务来说，通过加读写锁的方式来避免并行访问；</li><li>对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 <strong>Read View 来实现的，它们的区别在于创建 Read View 的时机不同，大家可以把 Read View 理解成一个数据快照，就像相机拍照那样，定格某一时刻的风景。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View</strong>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GoLang</title>
    <link href="/golang-note.html"/>
    <url>/golang-note.html</url>
    
    <content type="html"><![CDATA[<h1 id="Go基础">Go基础</h1><blockquote><p>分享一些我的Golang笔记，已助我拿到多个18k+的Offer，在面向Golang岗位时，Golang考察占比40%，其中问内置的数据结构如Map，channel，slice占比又是最大的。</p><p>当然语言不是根本，还要配合其他计算机八股文和一些基础的算法知识。</p></blockquote><h2 id="与java的区别">与java的区别</h2><ul><li>go不允许重载</li><li>go速度&gt;java</li><li>go没有多态</li><li>go通过匿名组合实现继承，java使用extends关键字，且go可以多继承，java不行</li><li>go有协程</li><li>GC使用三色标记法</li></ul><h2 id="数据类型与关键字">数据类型与关键字</h2><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(1).png" alt=""></p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(2).png" alt=""></p><h2 id="print格式化输出函数">print格式化输出函数</h2><p>Printf()，Sprintf()，FprintF() 虽然这三个函数，都是格式化输出，但是输出的目标不一样<br>Printf 是标准输出，一般是屏幕，也可以重定向。<br>Sprintf()是把格式化字符串输出到指定的字符串中。<br>Fprintf()是把格式化字符串输出到文件中。</p><h2 id="defer">defer</h2><p>作用：</p><ul><li>defer延迟函数，</li><li>释放资源，收尾工作（如释放锁，关闭文件，关闭链接）</li><li>捕获panic;</li></ul><p>多个 defer 调用顺序是 LIFO（后入先出），defer后的操作可以理解为压入栈中</p><p>defer，return，return value（函数返回值） <strong>执行顺序</strong>：</p><ol><li>首先return，</li><li>其次return value，</li><li>最后defer，且可以修改函数最终返回值，修改时机：<strong>有名返回值或者函数返回指针</strong></li></ol><h2 id="type">type</h2><p><code>type</code>可以<strong>定义结构体</strong>、<strong>接口</strong>、<strong>新类型</strong>，<strong>定义高阶函数类型</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> myint <span class="hljs-type">int</span><br><span class="hljs-keyword">type</span> mystr <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 函数式编程</span><br><span class="hljs-keyword">type</span> my_fun  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)</span></span>(<span class="hljs-type">string</span>)<br><span class="hljs-comment">//fun1()函数的返回值是my_func类型</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun1</span> <span class="hljs-params">()</span></span> my_fun&#123;<br>    fun := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a,b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span> &#123;<br>        s := strconv.Itoa(a) + strconv.Itoa(b)<br>        <span class="hljs-keyword">return</span> s<br>    &#125;<br>    <span class="hljs-keyword">return</span> fun<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="引用类型与值类型"><strong>引用类型与值类型</strong></h2><p><code>引用类型</code> 变量存储的是一个地址，这个地址存储最终的值。内存通常在<strong>堆上分配</strong>。通过 <strong>GC 回收</strong>。包括 <strong>指针</strong>、<strong>slice 切片</strong>、<strong>管道 channel</strong>、<strong>接口 interface</strong>、<strong>map</strong>、<strong>函数</strong>等。<code>引用类型</code>的变量，我们<strong>不光要声明它，还要为它分配内容空间</strong></p><p><code>值类型</code>是 基本数据类型，int,float,bool,string, 以及数组和 struct 特点：变量直接存储值，内存通常<strong>在栈中分配</strong>，栈在函数调用后会被释放，<code>值类型</code>的则不需要显示分配内存空间，是因为<strong>go会默认帮我们分配好</strong></p><h2 id="make-new">make &amp; new</h2><p><strong>变量初始化</strong>，一般包括2步：</p><ol><li>声明，var</li><li><strong>内存分配，new或者make</strong></li></ol><p>var声明<strong>值类型</strong>的变量时，系统会<strong>默认为他分配内存空间</strong>，并赋该类型的<strong>零值</strong>比如布尔、数字、字符串、结构体</p><p>如果<strong>指针类型</strong>或者<strong>引用类型</strong>的变量，系统<strong>不会为它分配内存</strong>，默认就是**<code>nil</code>**。此时如果你想直接使用，那么系统会抛异常，必须进行内存分配后，才能使用。</p><hr><p>关于make，第一个参数是类型，第二个参数是分配的空间，第三个参数是预留分配空间</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">list := <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>list = <span class="hljs-built_in">append</span>(list, <span class="hljs-string">&quot;a&quot;</span>)<br>fmt.Println(list, <span class="hljs-built_in">len</span>(list))<br><span class="hljs-comment">// 输出[          a], 11</span><br></code></pre></td></tr></table></figure><hr><p><strong>new 和 make</strong> 两个内置函数，<strong>主要有以下2点区别</strong>：</p><ol><li><p><strong>使用场景区别：</strong></p><p>make 只能用来分配及初始化类型为slice、map、chan 的数据。</p><p>new 可以分配任意类型的数据，并且置零。</p></li><li><p><strong>返回值区别：</strong></p><p>make返回的是slice、map、chan类型本身，这3种类型是引用类型，就没有必要返回他们的指针</p><p>new返回一个<strong>指向该类型内存地址的指针</strong></p></li></ol><h2 id="rune-类型"><strong>rune 类型</strong></h2><p>相当int32</p><p>golang中的字符串底层实现是通过byte数组的，中文字符在unicode下占2个字节，在utf-8编码下占3个字节，而golang默认编码正好是utf-8</p><p>byte 等同于int8，常用来处理ascii字符</p><p>rune 等同于int32,常用来处理unicode或utf-8字符</p><h2 id="单引号，双引号，反引号的区别"><strong>单引号，双引号，反引号的区别</strong></h2><p>单引号，表示byte类型或rune类型，对应 uint8和int32类型，默认是 rune 类型。byte用来强调数据是raw data，而不是数字；而rune用来表示Unicode的code point。</p><p>双引号，才是字符串，实际上是字符数组。可以用索引号访问某字节，也可以用len()函数来获取字符串所占的字节长度。</p><p>反引号，表示字符串字面量，但不支持任何转义序列。字面量 raw literal string 的意思是，你定义时写的啥样，它就啥样，你有换行，它就换行。你写转义字符，它也就展示转义字符。</p><h2 id="select">select</h2><p>golang 的 select 就是监听 IO 操作，当 IO 操作发生时，触发相应的动作每个case语句里必须是一个IO操作，确切的说，应该是一个面向channel的IO操作。</p><ul><li>select 机制用来处理异步 IO 问题</li><li>select 机制最大的一条限制就是每个 case 语句里必须是一个 IO 操作</li><li>golang 在语言级别支持 select 关键字</li></ul><h1 id="Slice">Slice</h1><h2 id="Slice与Array的区别">Slice与Array的区别</h2><p>array是固定长度的数组，是值类型的，如果进行赋值或者作为函数参数，实际上整个数据都会被重新拷贝一份，使用前必须声明长度。</p><p>slice切片是基于数组实现的，可以理解是为对底层数组的抽象，属于引用类型，作为函数参数时，slice传递的是指针。复制使用copy进行深拷贝，<code>:=</code> 是浅拷贝，slice不是线程安全的。</p><p>slice的数据结构定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">**<span class="hljs-keyword">type</span> slice <span class="hljs-keyword">struct</span> &#123;<br>array unsafe.Pointer<span class="hljs-comment">//指向底层数组的指针</span><br><span class="hljs-built_in">len</span> <span class="hljs-type">int</span><span class="hljs-comment">//切片长度</span><br><span class="hljs-built_in">cap</span> <span class="hljs-type">int</span><span class="hljs-comment">//切片容量</span><br>&#125;**<br></code></pre></td></tr></table></figure><h2 id="扩容">扩容</h2><p>Go 中切片扩容的策略：</p><ul><li>首先判断，如果新申请容量大于 2 倍的旧容量，最终容量就是新申请的容量</li><li>否则判断，如果旧切片的长度&lt;1024，则最终容量就是旧容量的两倍</li><li>否则判断，如果旧切片长度≥1024，则最终容量从旧容量开始循环 增加原来的 1/4, 直到最终容量大于等于新申请的容量</li><li>如果最终容量计算值溢出，则最终容量就是新申请容量</li></ul><p><strong>注意：如果 slice 在 append() 过程中没有发生扩容，那么修改就在原来的内存中，如果发生了扩容，就修改在新的内存中。</strong></p><h2 id="删除元素">删除元素</h2><p>指定<code>index</code>，调用<code>append</code>链接前后切片<code>append(str[:index], str[index + 1]…)</code></p><h2 id="内存分配">内存分配</h2><p>有可能分配到栈上，也有可能分配到栈上。当开辟切片空间较大时，会逃逸到堆上。</p><p>通过命令**<code>go build -gcflags &quot;-m -l&quot; xxx.go</code>**观察golang是如何进行逃逸分析的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>_ = <span class="hljs-built_in">make</span>([]<span class="hljs-type">string</span>, <span class="hljs-number">200</span>) <span class="hljs-comment">//1</span><br>    <span class="hljs-comment">//_ = make([]string, 20000)//2</span><br>&#125;<br><br><span class="hljs-comment">//output</span><br><span class="hljs-comment">//1. make([]string, 200) does not escape</span><br><span class="hljs-comment">//2. make([]string, 20000) escapes to heap</span><br></code></pre></td></tr></table></figure><h1 id="Map">Map</h1><p>map默认<strong>是并发不安全的</strong>，同时对map进行并发读写时，<strong>程序会panic</strong>，因为Go 官方认为 Go map 更应**适配典型使用场景，**而不是为了小部分情况（并发访问），导致性能损失。</p><p>map 因扩张⽽重新哈希时，各键值项存储位置都可能会发生改变，所以官方避免大家依赖顺序，直接打乱处理，都会从一个<strong>随机值序号的bucket</strong>，再从其中<strong>随机的cell开始遍历，所以是无序的。</strong></p><p>可以作为Map Key的<strong>只能是可比较的，<strong>则</strong>不能作为map key 的类型包括</strong>：</p><ul><li>slices</li><li>maps</li><li>functions</li></ul><h2 id="Map的实现">Map的实现</h2><p>Map 底层是由<code>hmap</code>和<code>bmap</code>两个结构体实现的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> hmap <span class="hljs-keyword">struct</span> &#123;<br>    count      <span class="hljs-type">int</span>            <span class="hljs-comment">//元素个数，调用len(map)时直接返回</span><br>    flags      <span class="hljs-type">uint8</span>          <span class="hljs-comment">//标志map当前状态,正在删除元素、添加元素.....</span><br>    B          <span class="hljs-type">uint8</span>          <span class="hljs-comment">//单元(buckets)的对数 B=5表示能容纳32个元素</span><br>    noverflow  <span class="hljs-type">uint16</span>        <span class="hljs-comment">//单元(buckets)溢出数量，如果一个单元能存8个key，此时存储了9个，溢出了，就需要再增加一个单元</span><br>    hash0      <span class="hljs-type">uint32</span>         <span class="hljs-comment">//哈希种子</span><br>    buckets    unsafe.Pointer <span class="hljs-comment">//指向单元(buckets)数组,大小为2^B，可以为nil</span><br>    oldbuckets unsafe.Pointer <span class="hljs-comment">//扩容的时候，buckets长度会是oldbuckets的两倍</span><br>    nevacute   <span class="hljs-type">uintptr</span>        <span class="hljs-comment">//指示扩容进度，buckets编号</span><br>    extra      *mapextra      <span class="hljs-comment">//与gc相关 可选字段</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><code>bmap</code></strong> 就是我们常说的“桶”，一个桶里面会最多装 8 个 key，<strong>低B位是相同的会落入同一个桶，高 8 位来决定 key 到底落入桶内的哪个位置</strong></p><p><strong><code>bmap</code></strong> 中还存储一些状态值，且都是小于minTopHash的</p><p>为了避免<code>tophash</code>和这些<strong>状态值</strong>相等，产生混淆，所以若<code>tophash</code>&lt;minTopHash时候，自动将其值加上minTopHash作为该key的tophash</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> bmap <span class="hljs-keyword">struct</span> &#123;<br>tophash [bucketCnt]<span class="hljs-type">uint8</span><br>&#125;<br><span class="hljs-comment">//实际上编译期间会生成一个新的数据结构</span><br><span class="hljs-keyword">type</span> bmap <span class="hljs-keyword">struct</span> &#123;<br>    topbits  [<span class="hljs-number">8</span>]<span class="hljs-type">uint8</span><br>    keys     [<span class="hljs-number">8</span>]keytype<br>    values   [<span class="hljs-number">8</span>]valuetype<br>    pad      <span class="hljs-type">uintptr</span><br>    overflow <span class="hljs-type">uintptr</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="读取">读取</h2><p>Go 语言中读取 map 有两种语法：带 comma 和 不带 comma。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 不带 comma 用法<br>value := m[<span class="hljs-string">&quot;name&quot;</span>]<br><span class="hljs-regexp">//</span> 带 comma 用法<br>value, ok := m[<span class="hljs-string">&quot;name&quot;</span>]<br></code></pre></td></tr></table></figure><p>根据 key 的不同类型/返回参数，编译器会将查找函数用更具体的函数替换</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(3).png" alt=""></p><ol><li><p><strong>写保护监测</strong></p><p>map 的标志位 flags。如果 flags 的写标志位此时被置 1 了，说明有其他协程在执行“写”操作，<strong>进而导致程序 panic</strong>，这也说明了 map 不是线程安全的</p></li><li><p>计算hash</p><p><strong>看高8位</strong>和<strong>低B位</strong> <code>10010111 | ... │ 01010</code></p></li><li><p><strong>找到hash对应的bucket</strong></p><p><strong>哈希值的低B个bit 位</strong>，用来定位key所存放的bucket，如果<strong>当前正在扩容中</strong>，并且定位到的旧bucket数据还未完成迁移，则使用<strong>旧的bucket</strong>（扩容前的bucket）</p></li><li><p><strong>遍历bucket查找</strong></p><p>用步骤2中的hash值，<strong>得到高8个bit位</strong>，用来快速判断key是否已在当前bucket中，也就是<code>10010111</code>，转化为十进制，也就是151。在 bucket 及bucket的overflow中寻找tophash 值（HOB hash）为 151* 的 槽位，即为key所在位置</p></li></ol><p><strong>5. 返回key对应的指针</strong></p><p>流程如下图：</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(4).png" alt=""></p><p>Map遍历</p><p>通过对 **<code>mapiterinit</code>**方法阅读，可得知其主要用途是在 map 进行遍历迭代时进行初始化动作。共有三个形参，用于读取当前哈希表的类型信息、当前哈希表的存储信息和当前遍历迭代的数据。</p><p>更具体的话就是根<strong>据随机数，选择一个桶位置作为起始点</strong>进行遍历迭代</p><h2 id="哈希冲突">哈希冲突</h2><p>比较常用的Hash冲突解决方案有链地址法和开放寻址法：</p><ul><li><p><strong>链地址法</strong><br>当哈希冲突发生时，<strong>创建新单元</strong>，并将新单元添<strong>加到冲突单元所在链表的尾部</strong>。</p></li><li><p><strong>开放寻址法</strong><br>当哈希冲突发生时，从发生冲突的那个<strong>单元</strong>起，按照一定的次序，从哈希表中寻找一个空闲的单元，然后把发生冲突的元素存入到该单元。</p><p>开放寻址法有多种方式：<strong>线性探测法(<strong>冲突则尝试</strong>加1)</strong>、<strong>平方探测法</strong>和<strong>双重哈希</strong>法。</p></li></ul><h2 id="扩容-2">扩容</h2><p><strong>负载因子（load factor），用于衡量当前哈希表中空间占用率的核心指标</strong></p><p><strong><code>负载因子 = 哈希表存储的元素个数/桶个数</code> (默认6.5)</strong></p><p>Map的扩容条件：</p><ol><li>map元素个数 &gt; 6.5 * 桶个数，<strong>双倍扩容<br>双倍扩容：新建一个buckets数组，新的buckets大小是原来的2倍，然后旧buckets数据搬迁到新的buckets</strong></li><li>当桶总数 &lt;2^15时，如果<strong>溢出桶总数 &gt;= 桶总数</strong>，则认为溢出桶过多。<br>当桶总数 ≥2^15时，且<strong>溢出桶总数 &gt;= 2 ^ 15 时</strong>，即认为溢出桶太多了。<br><strong>此时是等量扩容<br>等量扩容：并不扩大容量，buckets数量维持不变，重新做一遍类似双倍扩容的搬迁动作，把松散的键值对重新排列一次，使得同一个 bucket 中的 key 排列地更紧密，节省空间，提高 bucket 利用率，进而保证更快的存取。</strong></li></ol><p>对于条件2，其实算是对条件1的补充。因为在负载因子比较小的情况下，有可能 map 的查找和插入效率也很低，而第 1 点识别不出来这种情况，如overflow的bucket数量较多，因此有了第 2 扩容条件。</p><p>搬迁 buckets 的动作在 <code>growWork()</code>函数中，而调用 <code>growWork()</code>函数的动作是在 mapassign 和 mapdelete 函数中。也就是<strong>插入或修改、删除 key 的时候，都会尝试进行搬迁 buckets 的工作</strong>。<strong>每次最多移动2个桶，<strong>每次</strong>调用都会查看是否迁移完毕</strong>，如果没有迁移完毕就尝试继续搬迁。</p><h2 id="线程安全的Map">线程安全的Map</h2><p>三种方式实现：</p><ul><li><p>加读写锁</p><p>加锁方式简单</p></li><li><p>sync.Map</p></li><li><p>分片加锁</p><p>性能更好，可以降低锁的粒度，提高map对象的吞吐</p></li></ul><p><strong><code>sync.Map</code></strong> 采用<strong>读写分离和用空间换时间的策略</strong>保证 Map 的读写安全，使用 read 和 dirty 两个 map 来进行读写分离，降低锁时间来提高效率。</p><ol><li>无需初始化，直接声明即可使用</li><li><strong>读写需要</strong>使用sync.Map<strong>提供的方法</strong>，Store(key, value)用于存储，Load(key)用于取值，Delete(key)表示删除。</li></ol><p><strong>优点：</strong></p><p>适合读多写少的场景</p><p><strong>缺点：</strong></p><p>但是大量并发读写的情况下，锁的竞争会很激烈，导致性能降低。</p><p>如何解决这个问题：尽量减少锁的<strong>粒度</strong>和锁的<strong>持有时间</strong>，减少锁的粒度，常用方法就是分片 Shard，将一把锁分成几把锁，每个锁控制一个分片。</p><h1 id="内存管理">内存管理</h1><h2 id="GC算法">GC算法</h2><p>Go 的 GC 回收有三次演进过程：</p><ol><li>Go V1.3 之前普通标记清除（mark and sweep）方法，整体过程需要启动 STW，效率极低</li><li>GoV1.5 三色标记法，堆空间启动写屏障，栈空间不启动，全部扫描之后，需要重新扫描一次栈(需要 STW)，效率普通。</li><li>GoV1.8 三色标记法，混合写屏障机制，栈空间不启动（全部标记成黑色），堆空间启用写屏障，整个过程不要 STW，效率高。</li></ol><h3 id="三色标记法">三色标记法</h3><ol><li>创建：白、灰、黑 三个集合</li><li>将所有对象放入白色集合中</li><li>遍历所有<strong>root对象</strong>，把遍历到的对象从白色集合放入灰色集合 (这里放入灰色集合的都是根节点的对象)</li><li>遍历灰色集合，将灰色对象引用的对象从白色集合放入灰色集合，自身标记为黑色</li><li>重复步骤4，直到灰色中无任何对象，其中用到2个机制：</li><li>收集所有白色对象（垃圾）</li></ol><h3 id="混合写屏障"><strong>混合写屏障</strong></h3><p>当gc进行中时，新创建一个对象. 按照三色标记法的步骤,对象会被标记为白色,这样新生成的对象最后会被清除掉，这样会影响程序逻辑。golang引入写屏障机制.可以监控对象的内存修改，并对对象进行重新标记。<strong>gc一旦开始，无论是创建对象还是对象的引用改变，都会先变为灰色</strong>。</p><ul><li>GC开始将栈上的对象全部扫描并标记为黑色。</li><li>GC期间，任何在栈上创建的新对象，均为黑色。</li><li>被删除的对象标记为灰色。</li><li>被添加的对象标记为灰色。</li></ul><h3 id="GC流程">GC流程</h3><p>次完整的垃圾回收会分为四个阶段，分别是标记准备、标记开始、标记终止、清理：</p><ol><li><strong>标记准备（Mark Setup）</strong>：打开写屏障（Write Barrier），需 STW（stop the world)</li><li><strong>标记开始（Marking）</strong>：使用三色标记法并发标记 ，与用户程序并发执行</li><li><strong>标记终止（Mark Termination</strong>）：对触发写屏障的对象进行重新扫描标记，关闭写屏障（Write Barrier），需 STW（stop the world)</li><li><strong>清理（Sweeping）</strong>：将需要回收的内存归还到堆中，将过多的内存归还给操作系统，与用户程序并发执行</li></ol><h3 id="其他语言GC算法">其他语言GC算法</h3><ul><li>引用计数：每个对象维护一个引用计数，当引用该对象的<strong>对象被销毁时，引用计数减1</strong>，当引用<strong>计数器为0时回收该对象</strong>。<br>优点：对象可以很快的被回收，不会出现内存耗尽或达到某个阀值时才回收。<br>缺点：不能很好的处理循环引用，而且实时维护引用计数，有也一定的代价。<br>代表语言：Python、PHP</li><li>标记-清除：从根变量开始遍历所有引用的对象，引用的对象标记为&quot;被引用&quot;，没有被标记的进行回收。<br>优点：解决了引用计数的缺点。<br>缺点：需要STW，即要暂时停掉程序运行。<br>代表语言：Golang</li><li>分代收集：<strong>按照对象生命周期长短划分不同的代空间</strong>，<strong>生命周期长的放入老年代，而短的放入新生代，不同代有不能的回收算法和回收频率。</strong><br>优点：回收性能好<br>缺点：算法复杂<br>代表语言： <strong>JAVA</strong></li></ul><h2 id="GC什么时候触发">GC什么时候触发</h2><ol><li>主动触发，手动调用 <code>runtime.GC</code>来触发GC，此调用<strong>阻塞式地</strong>等待当前GC运行完毕。</li><li>被动触发，分为两种方式：<ol><li>使用步调（Pacing）算法，<strong>其核心思想是控制内存增长的比例，每次内存分配时</strong>检查当前内存<strong>分配量是否已达到阈值</strong>（环境变量GOGC，默认100%），即当内存扩大一倍时启用GC。</li><li>gcTriggerTime：当超过两分钟没有产生任何GC时，强制触发 GC。</li></ol></li></ol><h2 id="内存逃逸">内存逃逸</h2><p>逃逸：<strong>本该分配到栈上的变量，跑到了堆上，这就导致了内存逃逸。</strong></p><p>栈是高地址到低地址，栈上的变量，函数结束后变量会跟着回收掉，不会有额外性能的开销。<br>变量从栈逃逸到堆上，如果要回收掉，需要进行 gc，那么 gc 一定会带来额外的性能开销。编程语言不断优化 gc 算法，主要目的都是为了减少 gc 带来的额外性能开销，变量一旦逃逸会导致性能开销变大。逃逸分析在编译阶段完成的</p><p>编译器会根据<strong>变量是否被外部引用来决定是否逃逸</strong>：</p><ol><li>如果函数外部没有引用，则优先放到栈中；</li><li>如果函数外部存在引用，则必定放到堆中;</li><li>如果栈上放不下，则必定放到堆上;</li></ol><p>通过编译参数**<code>-gcflag=-m</code>**可以查看编译过程中的逃逸分析</p><p><strong>内存逃逸的情况如下：</strong></p><ol><li>指针逃逸：方法内返回局部变量指针。</li><li>变量大小不确定：如编译期间无法确定slice的长度</li><li>栈空间不足：切片（扩容后）长度太大。</li><li>动态类型：如果函数参数为 interface{}，也会发生逃逸</li><li>在 slice 或 map 中存储指针</li><li>向 channel 发送指针数据。</li><li>在闭包中引用包外的值。</li></ol><h1 id="调度模型">调度模型</h1><h2 id="GMP模型">GMP模型</h2><ul><li><p><strong><code>G（Goroutine）</code></strong>：其中保存着栈，寄存器，以及指令等信息。</p></li><li><p><strong><code>M（Machine）</code></strong>：代表一个操作系统的主线程，<strong>是对内核级线程的封装</strong>，数量对应真实的 CPU 数，<strong>用于执行 G</strong>。M 会优先<strong>从关联的 P 的本地队列中</strong>直接获取待执行的 G。M <strong>保存</strong>了 <strong>M 自身使用的栈信息</strong>、当前正在 M上<strong>执行的 G 信息</strong>、与之<strong>绑定的 P 信息</strong>。</p></li><li><p><strong><code>P（Processor）</code></strong>：可以<strong>看作为一个局部调度器，<strong>当 P 有任务时，就</strong>需要创建</strong>或者<strong>唤醒</strong>一个<strong>系统线程</strong>来执行它队列里的任务，所以 P 和 M 是相互绑定的。</p><p><strong>P的数量默认是CPU核数，也可以通过GOMAXPROCS来指定数量。</strong></p><p>每个P都会维护一个<strong>本地队列</strong>，用于保存G，P会从队列头获取G交给M执行，执行完后放入到队列尾（如果需要继续执行）</p></li></ul><p>调度流程</p><ol><li>每个 P 有个局部队列，局部队列保存待执行的 goroutine，局部队列已经满了之后放到全局队列</li><li>每个 P 和一个 M 绑定，M 是真正的执行 P 中 goroutine 的实体（流程 3），M 从绑定的 P 中的局部队列获取 G 来执行</li><li>当局部队列为空时，M会从<strong>全局队列获取</strong>到本地队列来执行 G，当从全局队列中没有获取到可执行的 G 时候，M 会<strong>从其他 P的局部队列中偷取 G 来执行，<strong>也就是称为</strong>work stealing</strong></li><li>当 G 因系统调用（syscall）阻塞时会阻塞 M，此时 P 会和 M 解绑即 <strong>hand off</strong>，并寻找空闲的M</li><li>当 G 因 channel 或者 network I/O 阻塞时，不会阻塞 M，<strong>M 会寻找其他runnable 的 G</strong>；当阻塞的 G 恢复后会重新进入 runnable 进入 P 队列等待执行</li></ol><p>GMP 调度过程可能存在的阻塞</p><ol><li>I/O，select</li><li>block on syscall</li><li>channel</li><li>等待锁</li><li>runtime.Gosched()</li></ol><h1 id="并发编程">并发编程</h1><p>1.互斥锁；2.读写锁；3.原子操作；4.sync.once；5. sync.atomic；6.channel</p><h2 id="channel">channel</h2><p>channel是Go语言中的一个<strong>数据类型</strong>，可以把它看成管道，用来解决数据通信的问题。</p><p>默认情况下，channel接收和发送数据都是阻塞的，除非另一端已经准备好，这样就使得goroutine同步变的更加的简单，而<strong>不需要显式的lock。</strong></p><p>根据通道的<strong>容量</strong>，可以将通道分为<strong>无缓冲通道</strong>和<strong>缓冲通道</strong></p><p>根据通道<strong>传输方向</strong>，还可以通道分为<strong>双向通道</strong>，<strong>只读通道</strong>和<strong>只写通道</strong></p><p><strong>常见问题</strong></p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled%20(5).png" alt=""></p><h3 id="channel数据结构">channel数据结构</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">type hchan struct &#123;<br>    qcount   uint           <span class="hljs-regexp">//</span> channel中的元素个数<br>    dataqsiz uint           <span class="hljs-regexp">//</span> channel中循环队列的长度<br>    buf      unsafe.Pointer <span class="hljs-regexp">//</span> channel缓冲区数据指针<br>    elemsize uint16            <span class="hljs-regexp">//</span> buffer中每个元素的大小<br>    closed   uint32            <span class="hljs-regexp">//</span> channel是否已经关闭，<span class="hljs-number">0</span>未关闭<br>    elemtype *_type <span class="hljs-regexp">//</span> channel中的元素的类型<br>    sendx    uint   <span class="hljs-regexp">//</span> channel发送操作处理到的位置<br>    recvx    uint   <span class="hljs-regexp">//</span> channel接收操作处理到的位置<br>    recvq    waitq  <span class="hljs-regexp">//</span> 等待接收的sudog（sudog为封装了goroutine和数据的结构）队列由于缓冲区空间不足而阻塞的Goroutine列表<br>    sendq    waitq  <span class="hljs-regexp">//</span> 等待发送的sudogo队列，由于缓冲区空间不足而阻塞的Goroutine列表<br><br>    lock mutex   <span class="hljs-regexp">//</span> 一个轻量级锁<br>&#125;<br></code></pre></td></tr></table></figure><p>channel内部数据结构主要包含：</p><ul><li>buf指向的一个底层的循环数组，只有设置为有缓存的channel才会有buf</li><li>sendx和recvx分别指向底层循环数组的发送和接收元素位置的索引</li><li>sendq和recvq分别表示发送数据的被阻塞的goroutine和读取数据的goroutine，这两个都是一个双向链表结构</li></ul><p>hchan结构体中<strong>采用Mutex锁来保证数据读写安全</strong>。在<strong>对循环数组buf中的数据进行入队</strong>和出队操作时，必须先获取<strong>互斥锁</strong>，才能操作channel数据。</p><p>![](<a href="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled">https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/Untitled</a> (6).png)</p><h3 id="channel应用场景">channel应用场景</h3><p>channel适用于数据在多个协程中流动的场景，有很多实际应用：</p><ol><li>任务定时</li><li>解耦生产者和消费者</li><li>控制并发数</li><li>协程间数据传递</li></ol><hr><p>同一个协程里，<strong>不能对无缓冲channel同时发送和接收数据，如果这么做会直接报错死锁。</strong></p><p>对于一个无缓冲的channel而言，只有不同的协程之间一方发送数据一方接受数据才不会阻塞。channel无缓冲时，发送阻塞直到数据被接收，接收阻塞直到读到数据。</p><h2 id="锁">锁</h2><p><strong>悲观锁</strong></p><p>悲观锁：当要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在<strong>修改数据之前先锁定，再修改的方式被称之为悲观并发控制</strong></p><p><strong>乐观锁</strong></p><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况不会造成冲突，所以在数据进行<strong>提交更新的时候，才会对数据的冲突与否进行检测</strong>，如果冲突，则返回给用户异常信息，让用户决定如何去做。乐观锁适用于<strong>读多写少的场景</strong>，这样可以提高程序的吞吐量</p><h2 id="同步原语">同步原语</h2><ol><li><strong><code>sync.Mutex</code></strong>（互斥锁） 可以限制对临界资源的访问，保证只有一个 goroutine 访问共享资源</li><li><strong><code>sync.RWMutex</code></strong> （读写锁） 可以限制对临界资源的访问，保证只有一个 goroutine 写共享资源，可以有多个goroutine 读共享资源。<br>使用场景：<strong>大量并发读，少量并发写</strong>，有强烈的性能要求</li><li><strong><code>sync.WaitGroup</code></strong> 可以等待一组 Goroutine 的返回。<br>使用场景：并发等待，任务编排，一个比较常见的使用场景是批量发出 RPC 或者 HTTP 请求</li><li><strong><code>sync.Cond</code></strong> 可以让一组的 Goroutine <strong>都在满足特定条件时被唤醒</strong>。<br>使用场景：利用等待 / 通知机制实现阻塞或者唤醒</li><li><strong><code>sync.Once</code></strong> 可以保证在 Go 程序运行期间的某段代码只会执行一次<br>使用场景：常常用于单例对象的初始化场景</li><li><strong><code>sync.Pool</code><strong>可以将暂时将</strong>不用的对象缓存起来，待下次需要的时候直接使用</strong>，不用再次经过内存分配，复用对象的内存，减轻 GC 的压力，提升系统的性能（频繁地分配、回收内存会给 GC 带来一定的负担，严重的时候会引起 CPU 的毛刺）<br>使用场景：对象池化， TCP连接池、数据库连接池、Worker Pool</li><li><strong><code>sync.Context</code></strong><br>可以进行上下文信息传递、提供超时和取消机制、控制子 goroutine 的执行</li></ol><h2 id="并发控制">并发控制</h2><p>golang控制并发有三种经典的方式：</p><ol><li><p><strong>channel</strong></p><p>使用<strong>无缓冲的通道</strong>作为<strong>同步通道</strong></p></li><li><p><strong>WaitGroup</strong></p><p>通过<strong>sync包</strong>中的WaitGroup实现并发控制，在主 goroutine 中 <code>Add(delta int)</code> 索要等待goroutine 的**数量，**在每一个 goroutine 中调用<code>Done()</code>通知完成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">wg.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(url <span class="hljs-type">string</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wg.Done()<br>http.Get(url)<br>&#125;(url)<br></code></pre></td></tr></table></figure></li><li><p><strong>Context</strong></p><p>Context 包主要是用来处理多个 goroutine 之间<strong>共享数据</strong>，及多个 goroutine 的<strong>管理</strong></p><p>例如提供了超时 Timeout 和 Cancel 机制。总的来说，在下面这些场景中，可以考虑使用 Context：</p><ul><li>上下文信息传递</li><li>控制子 goroutine 的运行</li><li>超时控制的方法调用</li><li>可以取消的方法调用</li></ul></li></ol><h2 id="Goroutine泄露">Goroutine泄露</h2><p><strong>泄露情况分类</strong></p><ul><li>channel 导致的泄露<br>发送不接收，<strong>接收不发送</strong></li><li>传统同步机制导致的泄露（主要指面向共享内存的同步机制，比如排它锁、共享锁）<br>WaitGroup ，如果设置了错误的任务数，也可能会导致阻塞，导致泄露发生。</li></ul><h2 id="channel和锁的对比"><strong>channel和锁的对比</strong></h2><ol><li>并发问题可以用channel解决也可以用Mutex解决，但是它们的擅长解决的问题有一些不同。<br>channel关注的是<strong>并发问题的数据流动</strong>，<strong>适用于数据在多个协程中流动的场景。</strong><br>而mutex关注的是是数据不动，<strong>某段时间只给一个协程访问数据的权限</strong>，<strong>适用于数据位置固定的场景。</strong></li><li>channel的性能比锁代价要大很多</li></ol><p>channel和共享内存有什么优劣势</p><p>Go的设计思想就是, 不要通过共享内存来通信，而是通过通信来共享内存，前者就是传统的加锁，后者就是Channel。</p><p>共享内存是在操作内存的同时，通过互斥锁、CAS等保证并发安全，<br>而channel虽然底层维护了一个互斥锁，来保证线程安全，但其可以理解为先进先出的队列，通过管道进行通信。</p><p>共享内存优势是资源利用率高、系统吞吐量大,劣势是平均周转时间长、无交互能力。<br>channel优势是降低了并发中的耦合，劣势是会出现死锁。</p><h1 id="面向对象">面向对象</h1><h2 id="结构比较">结构比较</h2><p>如果struct中含有不能被比较的字段类型，就不能被比较<br>如果struct中所有的字段类型都支持比较，那么就可以被比较。对应字段相等则认为两个式相等的</p><p><strong>不可被比较的类型</strong></p><ol><li>slice，因为slice是引用类型，除非是和nil比较</li><li>map，和slice同理，如果要比较两个map只能通过循环遍历实现</li><li>函数类型</li></ol><p>其他的类型都可以比较。</p><p>还有两点值得注意：</p><ul><li>结构体之间只能比较它们是否相等，而不能比较它们的大小。</li><li>只有所有属性都相等而属性顺序都一致的结构体才能进行比较。</li></ul><h2 id="方法与函数">方法与函数</h2><p>函数是指不属于任何结构体、类型的方法，也就是说函数是没有接收者的；<strong>而方法是有接收者的</strong>。</p><ul><li>如果方法的<strong>接收者是指针类型</strong>，无论调用者是对象还是对象指针，修改的<strong>都是对象本身</strong>，会影响调用者；</li><li>如果方法的接收者是值类型，无论调用者是对象还是对象指针，修改的都是对象的副本，不影响调用者；</li></ul><h2 id="接口">接口</h2><p>在Go语言中接口（interface）<strong>是一种类型，一种抽象的类型。</strong></p><p>Go 引入了动态语言的便利，同时又会进行静态语言的类型检查，Go 采用了折中的做法：不要求类型<strong>显示地声明实现了某个接口</strong>，<strong>只要实现了相关的方法即可</strong>，编译器就能检测到。</p><p><strong>值接收者和指针接收者实现接口的区别</strong></p><p>接口接收者是指针类型，则只能接受指针类型的赋值</p><p>接口是值类型，则都可以</p><p>参考：</p><p><a href="https://www.liwenzhou.com/posts/Go/12_interface/#autoid-1-6-2">https://www.liwenzhou.com/posts/Go/12_interface/#autoid-1-6-2</a></p><h3 id="接口断言"><strong><strong>接口断言</strong></strong></h3><p>接口断言分为<strong>安全断言</strong>和<strong>非安全断言</strong>，使用非安全断言可能造成<code>panic</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">s, ok := i2.(Student) <span class="hljs-comment">//安全，断言失败，也不会panic，只是ok的值为false</span><br>s := i1.(Student) <span class="hljs-comment">//不安全，如果断言失败，会直接panic</span><br></code></pre></td></tr></table></figure><p>或者使用switch</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">switch <span class="hljs-selector-tag">ins</span>:=s.(type) &#123;<br>    case Triangle:<br>        fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;三角形。。。&quot;</span>,<span class="hljs-selector-tag">ins</span><span class="hljs-selector-class">.a</span>,<span class="hljs-selector-tag">ins</span><span class="hljs-selector-class">.b</span>,<span class="hljs-selector-tag">ins</span>.c)<br>    case Circle:<br>        fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;圆形。。。。&quot;</span>,<span class="hljs-selector-tag">ins</span>.radius)<br>    case int:<br>        fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;整型数据。。&quot;</span>)<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="空接口应用">空接口应用</h3><ul><li>空接口类型的变量可以存储任意类型的变量。</li><li>使用空接口实现可以接收任意类型的函数参数。</li><li><strong>空接口作为map的值</strong></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> studentInfo = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>studentInfo[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;沙河娜扎&quot;</span><br>studentInfo[<span class="hljs-string">&quot;age&quot;</span>] = <span class="hljs-number">18</span><br>studentInfo[<span class="hljs-string">&quot;married&quot;</span>] = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>Go中的多态性是在接口的帮助下实现的</p><p>类型接口的变量可以保存实现接口的任何值。接口的这个属性用于实现Go中的多态性。</p><h2 id="继承">继承</h2><p>Go语言的继承通过匿名组合完成：基类以Struct的方式定义，子类只需要把基类作为成员放在子类的定义中，支持多继承。</p><p>Java的继承通过extends关键字完成，不支持多继承。</p><h1 id="反射">反射</h1><p>recflect是golang用来检测存储在接口变量内部(值value；类型concrete type) pair对的一种机制。它提供了两种类型（或者说两个方法）让我们可以很容易的访问接口变量内容，分别是reflect.ValueOf() 和 reflect.TypeOf()。</p><ul><li>ValueOf用来获取输入参数接口中的数据的值，如果接口为空则返回0</li><li>TypeOf用来动态获取输入参数接口中的值的类型，如果接口为空则返回nil</li></ul><h1 id="错误">错误</h1><h2 id="panic"><strong>panic</strong></h2><p><strong>假如函数F中调用了panic语句，会终止其后要执行的代码，并会执行defer</strong></p><hr><p>几个容易出现panic的点：</p><ol><li>函数返回值或参数为指针类型，nil, 未初始化结构体，此时调用容易出现panic，可加 != nil 进行判断</li><li>数组切片越界</li><li>如果我们关闭未初始化的通道，重复关闭通道，向已经关闭的通道中发送数据，这三种情况也会引发 panic，导致程序崩溃</li><li>如果我们直接<strong>操作未初始化的map</strong>，<strong>并发读写</strong>，也会引发 panic</li><li>除数为0</li><li>调用 panic 函数</li></ol><h2 id="recover"><strong>recover</strong></h2><p>在一个 defer 延迟执行的函数中调用 recover ，它便能捕捉在这之后的panic，然后正常处理。</p>]]></content>
    
    
    <categories>
      
      <category>develop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Move语言为什么是一个安全的智能合约语言</title>
    <link href="/why-move-is-safety.html"/>
    <url>/why-move-is-safety.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>在Move开发者大会上徐萌教授主讲了「用 Move Prover对智能合约进行快速、可靠的形式化验证」主题学术报告，从用户视角解读 Move 语言及 Move Prover，内容深入浅出。</p><p>本文仅是对Movebit文章进行了精简和整理，有兴趣请参考Movebit原文：<a href="https://zhuanlan.zhihu.com/p/574171956">https://zhuanlan.zhihu.com/p/574171956</a></p></blockquote><h1 id="概述">概述</h1><p>区块链是一个很重要的系统，大量资产存放在了区块链上，而且区块链上的这些交易，一旦执行了它是不可以撤销的。所以<strong>智能合约就需要有一些规范来规定它是否真的能提供了它所宣传提供的功能，而不是一些意料之外的功能，这就需要我们有一个语言和一套工具来保证这一点。</strong> 在这种背景下， Move 语言以及 Move Prover这个工具就应运而生。</p><p>Move 是一个面向区块链设计的编程语言，它提供了更好的安全性。简单来说 Move 语言的安全性能是由两部分组成的，一是Move的类型系统，二是Move Prover形式化验证的工具。</p><p>并且这两个系统分别提供了不同程度的安全保护，Move中的类型系统提供了：</p><ul><li><p>类型安全</p></li><li><p>资源安全</p></li><li><p>引用安全。</p></li></ul><p>形式化验证工具 Move Prover，它主要提供了更多更高级的表述方法，就是更高级的去表达你想做什么的规范。其中:</p><ul><li>结构体不变量struct invariants：可以表达一个类型，一个结构体应该有什么样的状态</li><li>函数规范unit specification (per single function ) ：每一个程序每一个函数要遵循什么样的规范</li><li>状态机规范state-machine specification：表达在区块链上整个全局的状态要遵循怎么样的一个状态规范。</li></ul><p>这三个东西都可以由 Move prover 形式化验证的工具来规范。</p><p>Move 最早是为 Libra 项目所设计，后来Libra 改名为 Deim，Diem 后来卖给了Silvergate。而 Move 现在变成一个很多开发者参与，由社区来维护的开源的语言。</p><p>Move 的核心设计思想其实包括两点，第一点是它遵循了所谓的borrow semantic，一个借用的思想，这个就很像Rust的 borrow semantic，如果大家用过Rust语言的话，你会发现很多思想其实是借鉴于Rust来的。</p><p>另外一点就是 Move 遵循了所谓的 Linear Types，就像如果大家习惯于用这种所谓 smart pointer 的话，那么在c++里面有一个东西叫 unique pointer，它其实就是规范了一个对象的所有权，然后这个东西也被 Move 所吸收进来。</p><p>同时Move中是不存在动态调用。也就是说在编译一个 Move 智能合约的时候，我们就知道所有可能的执行路径，不会像 solidity 这样会有一个所谓的call back(动态调用的回调)，然后调用到<code>fallback</code>函数。这种事情在 Move 里面是不存在的。</p><p>最后Move中有一个完整的并且很强大的一个规范语言MSL。除了 Move 语言本身，开发者还可以对 Move 的程做出一些规范（spec），这个规范包括常见的pre/post condition，然后还有全局的全局状态不变量（global state invariant），这些我们都可以通过规范语言来实现。MSL规范语言其实是比 Move 语言本身要更强大的。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-09.jpg" alt=""></p><h1 id="Move-类型系统">Move 类型系统</h1><p>Move 类型系统其实是 Move 的第一个安全特性，它主要保证了三个问题，一个是类型安全，一个是资源安全，一个是引用安全。</p><h2 id="类型安全">类型安全</h2><p>首先类型安全，简单来说 Move 它是一个强类型系统，并且它严格保证了在任何情况下都不可以做类型转换，你永远不可能把一个类型转化为另一个类型，这是 Move 这个类型系统所提供的一个保证。</p><p>如果更详细的说的话，Move 类型安全表达的是：</p><ul><li><p>每一个变量或者表达式，在Move中都有且只有一个类型</p></li><li><p>这个类型是在编译的时候就知道的</p></li><li><p>并且这个变量类型永远不可能被改变</p></li></ul><p>以上就是Move的类型系统所要保证的。</p><p>熟悉 Move 会觉得这个说法的不太对，比如Move中具有一个freeze这样的操作，它可以把一个mutable reference改成一个immutable，或者有那种as语法可以把一个uint8变成另一个uint64。但实际你却发现这个操作它并没有对变量做改变，它做的其实是重新新建了一个变量，并且把新的变量给它一个固定的类型，所以这些操作并没有违反 Move 的类型安全保证。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-18.jpg" alt=""></p><p>例如如果试图编译如下的代码的话，可以发现如果你写了一个类型不安全的程序， Move compiler根本就不会让你通过，会直接报错，说你在这里试图把一个<code>integer</code>转换成一个<code>Coin</code>，当然这样是不合理的，所以这就是 Move 类型安全所要保证的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs move">module 0x1::Account &#123;<br>    struct Coin has key &#123;<br>        balance: u64<br>    &#125;<br><br>    public fun wrong1(acc: signer) &#123;<br>        let val = 1000;<br>        move_to&lt;Coin&gt;(&amp;acc, val);<br>    &#125;<br><br>    public fun wrong2(acc: signer) &#123;<br>        let val = 1000;<br>        let coin: Coin = val;<br>        move_to&lt;Coin&gt;(&amp;acc, coin);<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="资源安全">资源安全</h2><p>在常见的这种编程语言里没有资源安全这个东西，Move中的资源安全允许你去做一些更细粒度的控制。对于比如说一个object它可不可以被复制，可不可以被丢弃，或者这个资源能存在于什么地方，以及这个资源的谁能生成，这个是对整个这种type的资源的一个控制。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-22.jpg" alt=""></p><p>我们如果举一个具体的例子来说的话。比如区块链上具有一种资源<code>Coin</code>，显然你如果试图复制一个 <code>coin</code>这种资源，相当于你从一个 <code>Coin</code> 变成两个<code>Coin</code>，那显然你钱就变多了，这个是不能接受的，同时 <code>Coin</code> 也不可能凭空消失，你必须把它花出去。简单来说就是一个东西它不能凭空出现，也不能凭空消失。这样的稀缺性就是由Move中的ablity，copy和drop来实现的。</p><p>Move资源具有<a href="https://movebook.chrisyy.top/abilities.html">四种能力</a>：分别是copy、drop、key、store。</p><p>copy和drop这两个ability，它保证说一个资源它是不是能被复制，或者是不是能被扔到一边不管，它是由这两个ability决定。</p><p>还有两个ability (key 和 store )决定这个资源它可以出现在哪里，它是否可以出现在你的function里面，并且随着你的智能合约结束就消失了，还是它可以写到区块链上，这个也是这两个ability决定的。</p><p>另一个例子是<a href="https://move-patterns.chrisyy.top/hot-potato.html">Hot Potato</a>，这是Move设计模式的一种，它通过Ability优雅的实现了函数的流程控制（可以去对比下Solidity中闪电贷的实现）。</p><h2 id="引用安全">引用安全</h2><p>Move中还有一个引用安全保证了安全性。如果你习惯于c语言或者c++，你肯定会遇到这种所谓的dangling pinter的问题，也就是野指针，野指针可能导致修改任意对象的问题。所以在Move中引入了所有权，来保证这一问题。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-27.jpg" alt=""></p><p>&quot;引用安全&quot;简单来说就是遵循了Rust的所谓的ownership的规则：</p><ul><li>任何一个函数里面的本地变量，在任何一个时间有且只能有一个owner来拥有。</li><li>同时对于一个全局变量，在整个blockchain里面，对于任何一个类型有且只有一个owner可以来拥有它</li></ul><p>这里的owner代表的是最多一个写者，或者没有写者但有多个读者的情况。</p><h1 id="Move的形式化验证系统">Move的形式化验证系统</h1><p>形式化验证是一种使用严格的数学方法来描述行为和推理计算机系统的正确性的技术。现在已经在操作系统、编译器等对正确性要求高的领域有一定应用。这里存在一个很明显的问题就是为什么在有了类型系统之后，为什么我们还需要 Move Prover 这样一个形式化验证系统？</p><p>简单的说是因为：类型系统只能保证一个比较简单的逻辑，它并不能满足于我们表述真实世界中对应的更复杂的逻辑需求或者更复杂的意图。比如，类型系统不能保证某一种结构体中的变量不会到达一个非预期的状态，或者函数前后的关系的约束，以及 global state的状态，这些目前都是没有办法全部被类型系统所表示的。</p><p>所以需要通过一种更高层次的方式来表达，而这个更高层次的方式就是所谓的形式化验证。Move中提供了一种更高层次的语言也就是 <a href="https://github.com/move-language/move/blob/main/language/move-prover/doc/user/spec-lang.md">MSL</a> (Move Specification Language) 语言来约束，规范Move代码，同时提供了一些工具来帮组我们来进行形式化验证，其中包含：</p><ul><li><p>结构体不变量 Struct invariant</p></li><li><p>测试规范 Unit specification</p><ul><li>前置条件 Pre-condition</li><li>异常条件Abort condition</li><li>后置条件 Post-conditions</li></ul></li><li><p>状态规范 State-machine specification</p><ul><li>Global invariants (single-state invariant)</li><li>Global update invariants (two-state invariant)</li></ul></li></ul><h2 id="结构体不变量-Struct-Invariant">结构体不变量 Struct Invariant</h2><blockquote><p>Struct invariants allows you to specify complicated relations among the fields of a struct type which have to hold at runtime.</p></blockquote><p>结构体不变量指的是允许你在运行时对结构体中不同的field之间复杂的关系作出规定，这是一个类型系统所达不到的。</p><p>一个最简单的例子，比如你根据一些事实或者商业逻辑，需要定义一个包含非0的64位的整数的结构体，最有效的方式是如果一个语言系统里已经存在一个非0的64位的整数类型，那么直接使用即可。但是这是目前在绝大多数语言里是没有办法做到，因为没有一个类型叫非0的64位整数。你能得到的最近的一个东西就是一个64位整数。所以你可以创造一个结构体，结构体的名字叫非零64位整数，然后里面有一个field，它叫结构体的值，然后它是64位整数。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-34.jpg" alt=""></p><p>但是这里存在一个问题，也就是整个所有的这些类型这个系统并不能阻止你写一个0进去，如果不小心写出来一个上图的函数 <code>fun create_zero()</code>它允许把一个0放到了结构体里面，这对运行时和编译器来说是完全没有问题的，但是这显然不是我们想要的。</p><p>所以这个时候就需要形式化验证的工具来给你提供能力。你就可以写一个形式化验证的一个规范，规定说在非零的结构体里面，它叫<code>value</code>的 <code>field</code>一定是要大于0。</p><p>然后在你有了这个规范之后，上文的函数 <code>fun create_zero()</code>，那么prover是会在这里报错。</p><p>而上图的第二个函数<code>fun create_x_checked()</code> 是允许的，因为这个函数是符合你所定义的规则，它一定不会把一个≤0的值放到这个结构体当中</p><p>所以当我们生成这样一个叫非0的64位整数的这样一个结构体的时候，其实就可以保证结构体的值一定不是0。这就是一个典型的 Move prove可以应用的一个例子。这一套结构体加结构体的规范，它其实起到的是一个“增强类型”的作用，它可以保证说结构体里面域之间的关系是符合某种关系。</p><p>刚刚是一个非常简单的例子，其实 Move Spec 可以支持写很复杂的关系，</p><h2 id="函数规范-Function-Specification">函数规范 Function Specification</h2><blockquote><p>For people not familiar with formal verification, function specification can be loosely considered as exhaustive unit testing.</p></blockquote><p>Move Prover可以对一个函数做一个规范，其中就包括函数应该表现成什么样子，他在什么样情况下会异常报错，什么样的情况下会结束执行，而在结束执行的情况下，他又应该保持一个什么样的状态？这个就是函数规范所要达到的一个目的。</p><p><strong>可以把函数规范想象成一个人在写单元测试，但这个人比任何人写的测试都要好。</strong></p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-37.jpg" alt=""></p><p>比如上图的代码，如果想知道这个代码对还是不对？那么你就可以开始对他做单元测试。</p><p>大家可能都听过一个单元测试的笑话，说QA工程师走进一家酒吧，要了一杯啤酒；要了-1杯啤酒，要了9999999杯啤酒，要了一杯洗脚水… 然后这其实就是单元测试做的一个事情。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-39.jpg" alt=""></p><p>如果想去测试这个就取钱的函数，你会怎么做？你去走到一个ATM机前，然后你开始取钱，取10块钱，取1000块钱，取9999999999999999999999999099块钱，甚至从一个不应该取钱的一个地址，比如说零这个地址去取，取0块钱等，就是有目的的去测试一些边界值的可能性。</p><p>然后你去试图穷尽你写的代码里面所有的可能的路径，然后你发现穷尽所有路径都没问题，这个是单元测试想要做的。你可以想象成对于函数的规范形式化验证工具 Move prove它也是在做这样一件事情。虽然它并不是实际上去把所有的可能情况都遍历一下。</p><h3 id="异常退出-Abort-Conditions">异常退出 Abort Conditions</h3><p>Move prover 给你提供了允许你去更专业去表达这个函数应该怎么样做事务处理的机会，就是通过所谓的函数的规范你可以写一个取钱函数的规范。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-40.jpg" alt=""></p><p>上图是一个取钱的功能函数，取钱可能出现的错误存在两个地方：</p><ul><li>首先如果地址就没有根本没有开户，那么会报错。这个就是第9行<code>abort if</code>的意思。</li><li>如果取的钱大于余额，那么同样会报错。也就是第10行的<code>abort if</code>的意思。</li></ul><p>这里（从第8到11行）提供了一个取钱的专业的规范，它会报错并且它只会在这两个地方报错。不仅是它会报错，<strong>同时是这两个报错是涵盖了所有可能的报错</strong>，这个就是函数的规范。我们可以对上图的代码做一个简单的测试，跑一下形式化验证的工具，然后我们发现这个规范是对的，确实这个函数会在这两个情况下报错。</p><p>如果假设说我足够粗心，或者我们认为不存在开户的情况下程序不会报错，我们把第9行注释掉（相当于我们的规范不完整），在这个情况下，形式化验证的工具其实会报错的（如下图），它会提醒你有一个异常发生了，但是我们并没有在规范里面去提到它。</p><p><img src="https://pic1.zhimg.com/80/v2-a1caf50d0c9d65be880b7995aa28adc4_1440w.webp" alt="img"></p><p>这个是不是这两个报错的条件，是不是真的是你期望看到的这种条件，我们都可以利用形式化验证工具来帮我们去理解这个程序的代码有什么问题。我们在实际的开发中经常会遇到说没想到它会报错，但是它实际上报错了的情况，这种时候这个 Prover 工具其实是非常有效的。</p><h3 id="后置条件-Post-conditions">后置条件 Post-conditions</h3><p>Prover除了关注它在什么情况下会出错，它还能够约束这个函数执行完要达到什么样的状态，这是比报错情况更重要的一个事情。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-44.jpg" alt=""></p><p>对于取钱这个函数的话，你得到的状态应该是当你的取钱函数结束了，你的钱肯定会减少，同时你减少的钱一定是等于你要取出来的钱。比如说你说要取100万，它一定是只减少100万，它不能减少200万，他也不能减少50万，他只能减少100万，这个东西就叫 后置条件post condition。</p><h3 id="前置条件-Pre-conditions">前置条件 Pre-conditions</h3><p>除了可以写什么情况下会异常、没有异常的话状态会发生什么变化，我们还可以规范在什么情况下，我们可以真正的进入这个函数。比如要求“无论什么时候调用这个函数，必须要求这个人已经开过户了”。在调用内部取钱这个函数的时候，一定要求有一个账户存在，你就可以把这个东西列为所谓的前置条件，你在调用这个函数的时候前置条件一定要存在，有了这个前置条件，就可以简化你需要列出的异常退出条件。</p><p>这种比较类似于测试中的setup</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-46.jpg" alt=""></p><p>所以简单来说就是你有前置条件，你有异常条件和你有后置条件，你这个东西就可以完整的规范说你这个函数应该做什么，以及不能做什么，这就是函数的规范的内容。</p><h3 id="全局不变量-Global-Invariants">全局不变量 Global Invariants</h3><p>全局不变量类似于结构体不变量，只不过它能够限制所有拥有这个类型资源的状态。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-49.jpg" alt=""></p><p>如果把全局的区块链看作一个状态机的话，Global的资源状态就是区块链当前的状态。全局不变量提供了一个工具去描述什么状态是对的，什么状态是不对的这样一个功能，同时它还给你描述了在哪些情况下你可以做这个状态的转换。</p><p>具体的例子：你想写一个银行账户系统，每个账户里面存了每个人多少钱，你其实都不用去定义任何函数，只要定义了账户系统，就可以开始去定义一些全局的东西。比如说你想定义：</p><ul><li><p>账户系统要保证任何现有的账户不能少于100块钱，</p></li><li><p>任何提取不能单次提取不能超过10%的现有的钱</p></li></ul><p>那么形式化的规范可以按照下图来写，当你开始实现你的功能代码的时候，那么Prover可以根据规范来检查你的错误。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-50.jpg" alt=""></p><p>有了上图的规范代码后，你根本就不去关心它函数到底怎么实现，然后就可以去真正去写金融的实现，比如说你有一个取钱的函数，如下图的实现。</p><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-51.jpg" alt=""></p><p>当写完上述代码，<strong>我们写完的这两个函数自动的就会被这两个全局的规范所限制</strong>。刚刚那个代码去 Prover 验证的时候，我们会发现验证不过，因为写的函数里面并没有去支持我们想要的全局规范。</p><p>所以说全局规范简单点说，它是一个比函数的本身的规范更高层次的一个规范，它可以允许你去直接描述区块链的状态机，而不去关心具体实现。如果一个区块链的构架师不关心每个函数怎么执行，但是关心整个全局状态，他要整个区块链系统要保持一个什么样状态，就是这种全局的不变性或者不变量，那么全局规范可以满足这种要求。这个是关于整个全局变量的介绍。其实 Move Prover里还有很多其他高级的功能，如果大家感兴趣的话，可以持续关注 Move Prover的进展。</p><h1 id="总结">总结</h1><p><img src="https://chrisyy-images.oss-cn-chengdu.aliyuncs.com/img/MengXu-Move%20Prover-07.jpg" alt=""></p><p>以上就是Move为什么是一门安全的智能合约语言的介绍，简单的说就是通过类型系统和形式化验证系统来保证的。</p><p>类型系统通过类型安全，资源安全和Rust中类似的引用安全来保证。</p><p>而Move Prover也就是形式化验证系统，则通过各种约束条件，相比于类型系统可以提供的更多的保证。其中具有对类型的一种增强，也有限制函数前后关系的约束，此外通过全局不变量这个规范，可以这个全局的状态都是符合要求的。</p>]]></content>
    
    
    <categories>
      
      <category>blockchain</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Movectf 题解writeup</title>
    <link href="/movectf-writeup.html"/>
    <url>/movectf-writeup.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>由 Sui 开发公司 Mysten Labs 支持的首个 MoveCTF（Capture The Flag）安全竞赛包含四道题目，以下是所有题目的题解</p><p>题目源码和题解：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF">https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF</a></p></blockquote><h1 id="checkin">checkin</h1><p>调用entry入口函数从而触发Flag事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs move"><br>public entry fun get_flag(ctx: &amp;mut TxContext) &#123;<br>        event::emit(Flag &#123;<br>            user: tx_context::sender(ctx),<br>            flag: true<br>        &#125;)<br>    &#125;<br></code></pre></td></tr></table></figure><p>调用函数可以通过cli来调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs move"># get_flag<br>sui client call --function get_flag --module checkin --package &lt;packageID&gt; --gas-budget 3000<br></code></pre></td></tr></table></figure><h1 id="simple-game">simple_game</h1><blockquote><p>题目源码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/simple_game">source code</a></p><p>题解代码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/simple_game/solve">solve code</a></p></blockquote><p>这道题是一个区块链上的游戏，部署时创建了一个Hero，每个英雄具有 200 点体力, 每次与普通怪物战斗消耗 1 点体力，与 Boss 战斗消耗 2 点体力。体力耗尽后，英雄不再能够战斗。</p><p>每次击杀怪物后，英雄经验 +1，当英雄经验达到 100 后，可以升级；升级后英雄 HP，strength，defense 均提升；英雄最高等级为 2。英雄等级达到 2 后，可以根据装备稀有度继续刷怪物或者击杀 Boss；击败 Boss 后，有 1% 几率掉落宝箱，最后打开宝箱同样也只有1%几率成功打开。</p><p>通过分析得到如果直接去打boss，一个是每次都会扣除2点的体力值，第二是击败后宝箱掉落几率太低。即使运气好击败boss成功掉落，后面打开TreasuryBox同样只有1%的概率，且如果随机数不为0的话宝箱则会丢失。所以需要预测随机数，才能在200的体力的限制下，成功击杀 Boss，保证掉落几率 100%，最后成功打开。</p><p>题目的随机数是通过<a href="https://github.com/chrisyy2003/ctf-writeup/blob/main/MoveCTF/simple_game/sources/random.move">random</a>库实现的，随机数种子是<code>ctx_bytes</code>和<code>uid_bytes</code>的拼接，<code>uid_bytes</code>是sui中object对象中<code>uid</code>字段转字节后的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs move">fun seed(ctx: &amp;mut TxContext): vector&lt;u8&gt; &#123;<br>        let ctx_bytes = bcs::to_bytes(ctx);<br>        let uid = object::new(ctx);<br>        let uid_bytes: vector&lt;u8&gt; = object::uid_to_bytes(&amp;uid);<br>        object::delete(uid);<br><br>        let info: vector&lt;u8&gt; = vector::empty&lt;u8&gt;();<br>        vector::append&lt;u8&gt;(&amp;mut info, ctx_bytes);<br>        vector::append&lt;u8&gt;(&amp;mut info, uid_bytes);<br><br>        let hash: vector&lt;u8&gt; = hash::sha3_256(info);<br>        hash<br>    &#125;<br></code></pre></td></tr></table></figure><p>所以如果能够获得当前交易的<code>ctx_bytes</code>和新生成的<code>uid</code>即可预测seed。</p><p><code>uid</code>是由<a href="https://github.com/MystenLabs/sui/blob/devnet-0.15.0/crates/sui-framework/sources/tx_context.move#L53">tx_context</a>库中的new函数通过ctx参数生成，内部调用了内置<code>derive_id</code>函数，<code>derive_id</code>通过当前交易的哈希值和<code>ids_created</code>拼接生成，<code>hash(tx_hash || ids_created)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs move">/// Generate a new, globally unique object ID with version 0<br>public(friend) fun new_object(ctx: &amp;mut TxContext): address &#123;<br>        let ids_created = ctx.ids_created;<br>        let id = derive_id(*&amp;ctx.tx_hash, ids_created);<br>        ctx.ids_created = ids_created + 1;<br>        id<br>    &#125;<br><br>/// Native function for deriving an ID via hash(tx_hash || ids_created)<br>native fun derive_id(tx_hash: vector&lt;u8&gt;, ids_created: u64): address;<br></code></pre></td></tr></table></figure><p>通过TxContext结构体可以得到，<code>ids_created</code>是<code>TxContext</code>的内置字段，表示当前交易被创建了多少个对象的一个计数器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs move">struct TxContext has drop &#123;<br>        /// A `signer` wrapping the address of the user that signed the current transaction<br>        signer: signer,<br>        /// Hash of the current transaction<br>        tx_hash: vector&lt;u8&gt;,<br>        /// The current epoch number.<br>        epoch: u64,<br>        /// Counter recording the number of fresh id&#x27;s created while executing<br>        /// this transaction. Always 0 at the start of a transaction<br>        ids_created: u64<br>    &#125;<br></code></pre></td></tr></table></figure><p>所以，如果能够获得当前交易被创建了多少个对象即可获得下一个<code>UID</code>的值，从而知道下一个seed的返回值。</p><p>但是函数参数中的<code>ctx</code>由于在定义的<code>TxContext</code>模块外，Move不能在模块以外直接修改其中的<code>ids_created</code>值，所以需要利用<a href="https://github.com/MystenLabs/sui/blob/devnet-0.15.0/crates/sui-framework/sources/bcs.move">bcs库</a>反序列化<code>ctx</code>对象，从而手动修改<code>ids_created</code>值。</p><p>bcs库主要实现了move中对象的一些序列化和反序列化操作，新建一个bcs对象会使得结构体的存储顺序交换，因为其中会调用<code>v::reverse(&amp;mut bytes)</code> ，所以返回结果中首20个字节是地址，紧接着是<code>tx_hash</code>，<code>epoch</code>，<code>ids_created</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs move">let ctx_bytes = bcs::new(bcs::to_bytes(ctx));<br>let _recover_address = bcs::peel_address(&amp;mut ctx_bytes);<br>let recover_tx_hash = bcs::peel_vec_u8(&amp;mut ctx_bytes);<br>let _recover_epoch = bcs::peel_u64(&amp;mut ctx_bytes);<br>let recover_ = bcs::peel_u64(&amp;mut ctx_bytes);<br>// 加上对象创建的数量<br>let ids_created = recover_ids_created + uid_offset;<br></code></pre></td></tr></table></figure><p>拿到<code>ids</code>，加上预测交易中可能创建的对象数，再将新的<code>ids</code>和<code>tx_hash</code>序列化为<code>uid</code>，随后按照题目中的seed的构造方式构造自己的seed即可。</p><blockquote><p>需要注意的是，<a href="https://github.com/MystenLabs/sui/blob/devnet-0.15.0/crates/sui-framework/sources/tx_context.move#L55-L56">object::new</a>时，是先计算id值，后更新id，所以预测的seed实际上是下一次seed的值</p></blockquote><p>最后封装一个<code>refresh_ctx</code>函数，每次使得offset的值+1，（也就是创建的对象数+1）去寻找随机数为0的id数。如果为0则跳出循环，并创建刚才循环次数的对象数从而修改ctx中的参数，最后使得合约下一次随机数为0。</p><p>此外，在<code>slay_boar_king</code>时，源码中创建<code>monster</code>时会<a href="https://github.com/chrisyy2003/ctf-writeup/blob/main/MoveCTF/simple_game/sources/adventure.move#L69-L72">调用四次随机数</a>，所以打boss时需要预测随机数为0的<a href="https://github.com/chrisyy2003/ctf-writeup/blob/main/MoveCTF/simple_game/solve/sources/main.move#L20">前四次</a>。</p><p>此题题解源码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/simple_game/solve">https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/simple_game/solve</a></p><h1 id="flash-loan">flash loan</h1><blockquote><p>题目源码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/flash_loan">source code</a></p><p>题解代码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/flash_loan/solve">solve code</a></p></blockquote><p>本题利用了Hot Potato实现了Move中的闪电贷，关于什么是Hot Potato可以看一下<a href="https://blog.chrisyy.top/move-patterns/hot-potato.html">Move Patterns Hot Potato</a>。</p><p>根据闪电贷的逻辑，每个人可以给<code>FlashLender</code>借钱，并且结构题存在一个VecMap记录着每个人存放了多少。</p><p>由于逻辑设计的问题，用户可以通过闪电贷来增加自己的存款余额，此外闪电贷的设计是<code>repay</code>和<code>check</code>余额是分开的，<code>check</code>检查余额的时候也是检查整个<code>Lender</code>的余额和<code>Last</code>的比较，所以导致check消耗我们的<code>receipt</code>的时候不需要传入代币，从而可以导致<code>FlashLender</code>中记录的值大于实际拥有的值。</p><p>所以通过闪电贷借出后再向Lender存款增加余额，最后再提取即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs move">entry public fun do(self: &amp;mut FlashLender, ctx: &amp;mut TxContext) &#123;<br>        let (coin, receipt) = flash::loan(self, 1000, ctx);<br>        flash::deposit(self, coin, ctx);<br>        flash::check(self, receipt);<br>        flash::withdraw(self, 1000, ctx);<br><br>        flash::get_flag(self, ctx);<br>    &#125;<br></code></pre></td></tr></table></figure><p>最后通过cli调用部署的solve合约，从而获得Flag。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs move">sui client call --function do --module m --package &lt;your_packID&gt; --args &lt;FlashLenderID&gt; --gas-budget 3000<br></code></pre></td></tr></table></figure><h1 id="move-lock">move_lock</h1><blockquote><p>题目源码：<a href="https://github.com/chrisyy2003/ctf-writeup/tree/main/MoveCTF/move_lock">source code</a></p><p>题解代码：<a href="https://github.com/chrisyy2003/ctf-writeup/blob/main/MoveCTF/move_lock/solve.py">solve code</a></p></blockquote><p>这道题关于一些数学知识。其中最核心是以下代码，通过变量名能够想到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>是一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">3\times3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>的矩阵，通过表达式可以得出其含义为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵左乘<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>矩阵，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>P</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">AP=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs move">let c11 = ( (a11 * p11) + (a12 * p21) + (a13 * p31) ) % 26;<br>let c21 = ( (a21 * p11) + (a22 * p21) + (a23 * p31) ) % 26;<br>let c31 = ( (a31 * p11) + (a32 * p21) + (a33 * p31) ) % 26;<br></code></pre></td></tr></table></figure><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>13</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>23</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>31</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>33</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>33</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mn>11</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mn>21</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>p</mi><mn>31</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>11</mn></msub><mo>×</mo><msub><mi>p</mi><mn>11</mn></msub><mo>+</mo><msub><mi>a</mi><mn>12</mn></msub><mo>×</mo><msub><mi>p</mi><mn>21</mn></msub><mo>+</mo><msub><mi>a</mi><mn>13</mn></msub><mo>×</mo><msub><mi>p</mi><mn>33</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>21</mn></msub><mo>×</mo><msub><mi>p</mi><mn>11</mn></msub><mo>+</mo><msub><mi>a</mi><mn>22</mn></msub><mo>×</mo><msub><mi>p</mi><mn>21</mn></msub><mo>+</mo><msub><mi>a</mi><mn>23</mn></msub><mo>×</mo><msub><mi>p</mi><mn>33</mn></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>a</mi><mn>31</mn></msub><mo>×</mo><msub><mi>p</mi><mn>11</mn></msub><mo>+</mo><msub><mi>a</mi><mn>32</mn></msub><mo>×</mo><msub><mi>p</mi><mn>21</mn></msub><mo>+</mo><msub><mi>a</mi><mn>33</mn></msub><mo>×</mo><msub><mi>p</mi><mn>33</mn></msub></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>11</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>21</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>c</mi><mn>31</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\left[\begin{array}{ccc}a_{11} &amp; a_{12} &amp; a_{13} \\a_{21} &amp; a_{22} &amp; a_{23} \\a_{31} &amp; a_{33} &amp; a_{33}\end{array}\right]\left[\begin{array}{l}p_{11} \\p_{21} \\p_{31}\end{array}\right]=\left[\begin{array}{l}a_{11} \times p_{11}+a_{12} \times p_{21}+a_{13} \times p_{33} \\a_{21} \times p_{11}+a_{22} \times p_{21}+a_{23} \times p_{33} \\a_{31} \times p_{11}+a_{32} \times p_{21}+a_{33} \times p_{33}\end{array}\right]=\left[\begin{array}{l}c_{11} \\c_{21} \\c_{31}\end{array}\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">13</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">13</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">23</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">33</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M403 1759 V84 H666 V0 H319 V1759 v0 v1759 h347 v-84H403z M403 1759 V0 H319 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.667em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.667em' height='3.600em' viewBox='0 0 667 3600'><path d='M347 1759 V0 H0 V84 H263 V1759 v0 v1759 H0 v84 H347zM347 1759 V0 H263 V1759 v0 v1759 h84z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>矩阵是<code>complete_plaintext</code>，<code>complete_plaintext</code>前9个已知，所以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>矩阵已知，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>矩阵为<code>encrypted_flag</code>，前9个同样已知。所以通过sagemath中的<a href="https://doc.sagemath.org/html/en/tutorial/tour_linalg.html#linear-algebra">solve_left</a>可以求的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>矩阵即源码中的<code>key</code>，求的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>后由于<code>complete_plaintext</code>除前9个以外<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>未均知，但<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span></span></span></span>已知，所以通过<a href="https://doc.sagemath.org/html/en/tutorial/tour_linalg.html#linear-algebra">solve_right</a>再求一次即可。</p><blockquote><p>由于<code>encrypted_flag</code>输出3个是c矩阵中的列，所以处理<code>encrypted_flag</code>时，需要三个一组<br>并调用<code>transpose</code>转置一下<br>sagamath有在线运行环境：<a href="https://sagecell.sagemath.org/">https://sagecell.sagemath.org/</a></p></blockquote><p>此外还有一个不成熟的想法，利用sagemath中的<a href="https://doc.sagemath.org/html/en/reference/calculus/sage/symbolic/relation.html?highlight=solve_mod">solve_mod</a>直接解一个9元的非线性方程，但是跑了很久没有跑出来，应该是复杂度的问题。</p>]]></content>
    
    
    <categories>
      
      <category>writeup</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
